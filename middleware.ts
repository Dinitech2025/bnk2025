import { NextResponse } from 'next/server'
import { getToken } from 'next-auth/jwt'
import { NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  // TEMPORAIREMENT D√âSACTIV√â POUR DEBUG
  console.log('üîç Middleware appel√© pour:', request.nextUrl.pathname)
  
  const token = await getToken({
    req: request,
    secret: process.env.NEXTAUTH_SECRET,
  })

  console.log('üîë Token trouv√©:', token ? `${token.email} (${token.role})` : 'Aucun')

  // Prot√©ger les routes admin
  if (request.nextUrl.pathname.startsWith('/admin')) {
    if (!token) {
      console.log('‚ùå Middleware: Pas de token, redirection vers /')
      // TEMPORAIREMENT D√âSACTIV√â
      // return NextResponse.redirect(new URL('/', request.url))
    }

    // V√©rifier si l'utilisateur a les droits admin ou staff
    if (token && token.role !== 'ADMIN' && token.role !== 'STAFF') {
      console.log('‚ùå Middleware: R√¥le insuffisant:', token.role)
      return NextResponse.redirect(new URL('/auth/unauthorized', request.url))
    }
  }

  console.log('‚úÖ Middleware: Acc√®s autoris√©')
  return NextResponse.next()
}

// Configurer les chemins √† v√©rifier
export const config = {
  matcher: ['/admin/:path*'],
} 