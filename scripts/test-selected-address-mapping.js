#!/usr/bin/env node

// Test du mapping des adresses s√©lectionn√©es
async function testSelectedAddressMapping() {
  console.log('üîß TEST MAPPING ADRESSES S√âLECTIONN√âES');
  console.log('====================================');
  console.log('');

  // Simuler les donn√©es exactes du checkout avec adresse s√©lectionn√©e
  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();

  try {
    // R√©cup√©rer l'adresse par d√©faut de l'utilisateur
    const userAddress = await prisma.address.findFirst({
      where: { 
        userId: 'cmesb9zzw0001fqfp9qz8hqhc', // ID utilisateur dinyoili@outlook.com
        street: '162 LB Lazaret Nord'
      }
    });

    if (!userAddress) {
      console.log('‚ùå Adresse utilisateur non trouv√©e');
      return;
    }

    console.log('üìã ADRESSE TROUV√âE EN BASE:');
    console.log('   ‚Ä¢ ID:', userAddress.id);
    console.log('   ‚Ä¢ Type:', userAddress.type);
    console.log('   ‚Ä¢ Street (DB):', userAddress.street);
    console.log('   ‚Ä¢ City (DB):', userAddress.city);
    console.log('   ‚Ä¢ ZipCode (DB):', userAddress.zipCode);
    console.log('   ‚Ä¢ Country (DB):', userAddress.country);
    console.log('');

    // Simuler la transformation du checkout (AVANT correction)
    const oldMapping = {
      street: userAddress.street,      // ‚ùå Mauvais champ pour API
      city: userAddress.city,
      zipCode: userAddress.zipCode,    // ‚ùå Mauvais champ pour API
      country: userAddress.country
    };

    // Simuler la transformation du checkout (APR√àS correction)
    const newMapping = {
      firstName: 'DINY',
      lastName: 'Oili',
      address: userAddress.street,     // ‚úÖ Bon champ pour API
      city: userAddress.city,
      postalCode: userAddress.zipCode, // ‚úÖ Bon champ pour API
      country: userAddress.country,
      phone: userAddress.phoneNumber || '+261325550444'
    };

    console.log('‚ùå ANCIEN MAPPING (INCORRECT):');
    console.log('   ‚Ä¢ street:', oldMapping.street);
    console.log('   ‚Ä¢ city:', oldMapping.city);
    console.log('   ‚Ä¢ zipCode:', oldMapping.zipCode);
    console.log('   ‚Ä¢ country:', oldMapping.country);
    console.log('   ‚Üí API re√ßoit: {street, zipCode} mais attend {address, postalCode}');
    console.log('');

    console.log('‚úÖ NOUVEAU MAPPING (CORRECT):');
    console.log('   ‚Ä¢ address:', newMapping.address);
    console.log('   ‚Ä¢ city:', newMapping.city);
    console.log('   ‚Ä¢ postalCode:', newMapping.postalCode);
    console.log('   ‚Ä¢ country:', newMapping.country);
    console.log('   ‚Üí API re√ßoit: {address, postalCode} comme attendu');
    console.log('');

    // Tester avec les nouvelles donn√©es
    const testOrderData = {
      items: [
        {
          id: 'test-mapping',
          name: 'Test Mapping Adresses',
          price: 100000,
          quantity: 1,
          type: 'product',
          metadata: {
            name: 'Test Mapping Adresses'
          }
        }
      ],
      total: 100000,
      currency: 'Ar',
      shippingAddress: newMapping,
      billingAddress: newMapping,
      email: 'dinyoili@outlook.com',
      phone: '+261325550444',
      firstName: 'DINY',
      lastName: 'Oili',
      paymentData: {
        method: 'paypal',
        status: 'completed',
        transactionId: 'MAPPING-TEST-' + Date.now(),
        amount: 100000
      },
      notes: 'Test correction mapping adresses'
    };

    console.log('üß™ TEST AVEC NOUVEAU MAPPING:');
    const response = await fetch('http://localhost:3000/api/orders/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testOrderData)
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.log('‚ùå ERREUR:', errorData.error);
      return;
    }

    const result = await response.json();
    console.log('‚úÖ COMMANDE CR√â√âE:', result.order.orderNumber);
    console.log('');

    // V√©rifier les adresses cr√©√©es
    const orderWithAddresses = await prisma.order.findUnique({
      where: { id: result.order.id },
      include: {
        shippingAddress: true,
        billingAddress: true
      }
    });

    console.log('üîç V√âRIFICATION ADRESSES SAUVEGARD√âES:');
    
    if (orderWithAddresses.shippingAddress) {
      console.log('‚úÖ LIVRAISON:');
      console.log('   ‚Ä¢ Street:', orderWithAddresses.shippingAddress.street);
      console.log('   ‚Ä¢ City:', orderWithAddresses.shippingAddress.city);
      console.log('   ‚Ä¢ ZipCode:', orderWithAddresses.shippingAddress.zipCode);
      console.log('   ‚Ä¢ Country:', orderWithAddresses.shippingAddress.country);
    }

    if (orderWithAddresses.billingAddress) {
      console.log('‚úÖ FACTURATION:');
      console.log('   ‚Ä¢ Street:', orderWithAddresses.billingAddress.street);
      console.log('   ‚Ä¢ City:', orderWithAddresses.billingAddress.city);
      console.log('   ‚Ä¢ ZipCode:', orderWithAddresses.billingAddress.zipCode);
      console.log('   ‚Ä¢ Country:', orderWithAddresses.billingAddress.country);
    }

    console.log('');
    console.log('üéØ R√âSULTAT:');
    const isComplete = orderWithAddresses.shippingAddress?.street && 
                      orderWithAddresses.shippingAddress?.city && 
                      orderWithAddresses.shippingAddress?.zipCode;
    
    console.log('   ‚Ä¢ Mapping corrig√©:', isComplete ? '‚úÖ' : '‚ùå');
    console.log('   ‚Ä¢ Adresses compl√®tes:', isComplete ? '‚úÖ' : '‚ùå');
    console.log('   ‚Ä¢ Pr√™t pour facture:', isComplete ? '‚úÖ' : '‚ùå');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testSelectedAddressMapping();
