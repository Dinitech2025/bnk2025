const { PrismaClient } = require('@prisma/client')
const readline = require('readline')

const prisma = new PrismaClient()

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(query) {
  return new Promise(resolve => rl.question(query, resolve))
}

async function cleanupOldQuoteMessages() {
  console.log('üßπ Nettoyage des anciens QuoteMessage...\n')

  try {
    // 1. V√©rifier ce qui va √™tre supprim√©
    const oldMessages = await prisma.quoteMessage.findMany({
      include: {
        quote: {
          include: {
            service: {
              select: {
                name: true
              }
            }
          }
        },
        sender: {
          select: {
            name: true,
            email: true
          }
        }
      }
    })

    if (oldMessages.length === 0) {
      console.log('‚úÖ Aucun ancien QuoteMessage √† nettoyer.')
      console.log('Le syst√®me est d√©j√† propre!')
      return
    }

    console.log(`‚ö†Ô∏è ${oldMessages.length} anciens QuoteMessage trouv√©s:\n`)
    oldMessages.forEach((msg, index) => {
      console.log(`   ${index + 1}. ${msg.quote.service.name}`)
      console.log(`      De: ${msg.sender.name || msg.sender.email}`)
      console.log(`      Date: ${msg.createdAt.toLocaleString('fr-FR')}`)
      console.log(`      Message: ${msg.message.substring(0, 50)}...`)
      console.log('')
    })

    // 2. V√©rifier que tous les messages ont √©t√© migr√©s
    console.log('üîç V√©rification de la migration...')
    const migratedCount = await prisma.message.count({
      where: {
        metadata: {
          path: ['migratedFrom'],
          equals: 'QuoteMessage'
        }
      }
    })

    console.log(`   ‚úÖ ${migratedCount} messages migr√©s trouv√©s dans le syst√®me unifi√©`)
    
    if (migratedCount < oldMessages.length) {
      console.log(`   ‚ö†Ô∏è ATTENTION: Seulement ${migratedCount}/${oldMessages.length} messages ont √©t√© migr√©s!`)
      console.log('   ‚ùå Annulation du nettoyage pour √©viter la perte de donn√©es.')
      console.log('   üí° Relancez la migration: node scripts/unify-message-systems.js')
      return
    }

    // 3. Demander confirmation
    console.log('\n‚ö†Ô∏è ATTENTION: Cette action est IRR√âVERSIBLE!')
    console.log('Les anciens QuoteMessage seront d√©finitivement supprim√©s.')
    console.log('Les donn√©es sont sauvegard√©es dans le syst√®me Message unifi√©.\n')

    const answer = await question('Voulez-vous continuer? (oui/non): ')

    if (answer.toLowerCase() !== 'oui') {
      console.log('‚ùå Nettoyage annul√©.')
      return
    }

    // 4. Supprimer les anciens messages
    console.log('\nüóëÔ∏è Suppression des anciens QuoteMessage...')
    const deleted = await prisma.quoteMessage.deleteMany({})

    console.log(`‚úÖ ${deleted.count} anciens QuoteMessage supprim√©s`)

    // 5. V√©rification finale
    const remaining = await prisma.quoteMessage.count()
    console.log(`\nüìä V√©rification finale:`)
    console.log(`   QuoteMessage restants: ${remaining}`)
    console.log(`   Messages dans syst√®me unifi√©: ${await prisma.message.count()}`)

    if (remaining === 0) {
      console.log('\n‚úÖ NETTOYAGE TERMIN√â AVEC SUCC√àS!')
      console.log('üéâ Le syst√®me est maintenant enti√®rement unifi√©!')
      console.log('   ‚úÖ Tous les anciens QuoteMessage ont √©t√© supprim√©s')
      console.log('   ‚úÖ Les donn√©es sont pr√©serv√©es dans le syst√®me Message')
      console.log('   ‚úÖ Le workflow de devis fonctionne avec le syst√®me unifi√©')
    } else {
      console.log('\n‚ö†Ô∏è Attention: Des QuoteMessage restants ont √©t√© d√©tect√©s')
      console.log('V√©rifiez manuellement la base de donn√©es.')
    }

  } catch (error) {
    console.error('\n‚ùå ERREUR:', error)
    console.error('Stack:', error.stack)
  } finally {
    rl.close()
    await prisma.$disconnect()
  }
}

cleanupOldQuoteMessages()

