#!/usr/bin/env node

// V√©rification de la compatibilit√© des champs d'adresse
async function verifyAddressFieldsCompatibility() {
  console.log('üîç V√âRIFICATION COMPATIBILIT√â CHAMPS ADRESSE');
  console.log('============================================');
  console.log('');

  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();

  try {
    console.log('üìã ANALYSE DES SCH√âMAS ET MAPPINGS');
    console.log('');

    // 1. Sch√©ma Prisma Address
    console.log('1Ô∏è‚É£ SCH√âMA PRISMA ADDRESS:');
    console.log('   ‚Ä¢ id: String (cuid)');
    console.log('   ‚Ä¢ userId: String');
    console.log('   ‚Ä¢ type: String');
    console.log('   ‚Ä¢ street: String ‚≠ê');
    console.log('   ‚Ä¢ city: String ‚≠ê');
    console.log('   ‚Ä¢ state: String? (optionnel)');
    console.log('   ‚Ä¢ zipCode: String ‚≠ê');
    console.log('   ‚Ä¢ country: String ‚≠ê');
    console.log('   ‚Ä¢ isDefault: Boolean');
    console.log('   ‚Ä¢ phoneNumber: String? (optionnel) ‚≠ê');
    console.log('');

    // 2. Champs du checkout
    console.log('2Ô∏è‚É£ CHAMPS CHECKOUT (formData):');
    console.log('   LIVRAISON:');
    console.log('   ‚Ä¢ selectedShippingAddressId: String');
    console.log('   ‚Ä¢ shippingAddress: String (manuel) ‚≠ê');
    console.log('   ‚Ä¢ shippingCity: String (manuel) ‚≠ê');
    console.log('   ‚Ä¢ shippingZipCode: String (manuel) ‚≠ê');
    console.log('   ‚Ä¢ shippingCountry: String (manuel) ‚≠ê');
    console.log('');
    console.log('   FACTURATION:');
    console.log('   ‚Ä¢ selectedBillingAddressId: String');
    console.log('   ‚Ä¢ billingAddress: String (manuel) ‚≠ê');
    console.log('   ‚Ä¢ billingCity: String (manuel) ‚≠ê');
    console.log('   ‚Ä¢ billingZipCode: String (manuel) ‚≠ê');
    console.log('   ‚Ä¢ billingCountry: String (manuel) ‚≠ê');
    console.log('');
    console.log('   COMMUN:');
    console.log('   ‚Ä¢ firstName: String ‚≠ê');
    console.log('   ‚Ä¢ lastName: String ‚≠ê');
    console.log('   ‚Ä¢ phone: String ‚≠ê');
    console.log('');

    // 3. Format envoy√© √† l'API
    console.log('3Ô∏è‚É£ FORMAT ENVOY√â √Ä L\'API /orders/create:');
    console.log('   shippingAddress: {');
    console.log('     ‚Ä¢ firstName: String ‚≠ê');
    console.log('     ‚Ä¢ lastName: String ‚≠ê');
    console.log('     ‚Ä¢ address: String ‚≠ê (mapp√© depuis street)');
    console.log('     ‚Ä¢ city: String ‚≠ê');
    console.log('     ‚Ä¢ postalCode: String ‚≠ê (mapp√© depuis zipCode)');
    console.log('     ‚Ä¢ country: String ‚≠ê');
    console.log('     ‚Ä¢ phone: String ‚≠ê');
    console.log('   }');
    console.log('');

    // 4. Mapping dans l'API
    console.log('4Ô∏è‚É£ MAPPING DANS L\'API:');
    console.log('   API re√ßoit ‚Üí Sauvegarde en DB:');
    console.log('   ‚Ä¢ address ‚Üí street ‚úÖ');
    console.log('   ‚Ä¢ city ‚Üí city ‚úÖ');
    console.log('   ‚Ä¢ postalCode ‚Üí zipCode ‚úÖ');
    console.log('   ‚Ä¢ country ‚Üí country ‚úÖ');
    console.log('   ‚Ä¢ phone ‚Üí phoneNumber ‚úÖ');
    console.log('   ‚Ä¢ firstName/lastName ‚Üí PAS SAUVEGARD√âS ‚ö†Ô∏è');
    console.log('');

    // 5. Champs utilis√©s dans la facture
    console.log('5Ô∏è‚É£ CHAMPS UTILIS√âS DANS LA FACTURE:');
    console.log('   billingAddress: {');
    console.log('     ‚Ä¢ name: user.firstName + user.lastName ‚≠ê');
    console.log('     ‚Ä¢ address: billingAddress.street ‚≠ê');
    console.log('     ‚Ä¢ city: billingAddress.city ‚≠ê');
    console.log('     ‚Ä¢ postalCode: billingAddress.zipCode ‚≠ê');
    console.log('     ‚Ä¢ country: billingAddress.country ‚≠ê');
    console.log('     ‚Ä¢ phone: billingAddress.phoneNumber ‚≠ê');
    console.log('   }');
    console.log('');

    // 6. Test avec une adresse r√©elle
    console.log('6Ô∏è‚É£ TEST AVEC ADRESSE R√âELLE:');
    const testAddress = await prisma.address.findFirst({
      where: { 
        user: { email: 'dinyoili@outlook.com' },
        street: { not: '' }
      }
    });

    if (testAddress) {
      console.log('   üìç ADRESSE TROUV√âE:');
      console.log('   ‚Ä¢ ID:', testAddress.id);
      console.log('   ‚Ä¢ street:', testAddress.street || 'VIDE');
      console.log('   ‚Ä¢ city:', testAddress.city || 'VIDE');
      console.log('   ‚Ä¢ zipCode:', testAddress.zipCode || 'VIDE');
      console.log('   ‚Ä¢ country:', testAddress.country || 'VIDE');
      console.log('   ‚Ä¢ phoneNumber:', testAddress.phoneNumber || 'VIDE');
      console.log('   ‚Ä¢ state:', testAddress.state || 'VIDE');
      console.log('');

      // Simuler le mapping checkout ‚Üí API
      const checkoutToApi = {
        firstName: 'DINY',
        lastName: 'Oili',
        address: testAddress.street,        // ‚úÖ street ‚Üí address
        city: testAddress.city,             // ‚úÖ city ‚Üí city
        postalCode: testAddress.zipCode,    // ‚úÖ zipCode ‚Üí postalCode
        country: testAddress.country,       // ‚úÖ country ‚Üí country
        phone: testAddress.phoneNumber || '+261325550444'  // ‚úÖ phoneNumber ‚Üí phone
      };

      console.log('   üì§ MAPPING CHECKOUT ‚Üí API:');
      Object.entries(checkoutToApi).forEach(([key, value]) => {
        console.log(`   ‚Ä¢ ${key}: "${value || 'VIDE'}"`);
      });
      console.log('');

      // Simuler le mapping API ‚Üí DB
      const apiToDb = {
        userId: 'test-user-id',
        type: 'SHIPPING',
        street: checkoutToApi.address,      // ‚úÖ address ‚Üí street
        city: checkoutToApi.city,           // ‚úÖ city ‚Üí city
        zipCode: checkoutToApi.postalCode,  // ‚úÖ postalCode ‚Üí zipCode
        country: checkoutToApi.country,     // ‚úÖ country ‚Üí country
        phoneNumber: checkoutToApi.phone    // ‚úÖ phone ‚Üí phoneNumber
        // ‚ùå firstName/lastName perdus
      };

      console.log('   üíæ MAPPING API ‚Üí DB:');
      Object.entries(apiToDb).forEach(([key, value]) => {
        console.log(`   ‚Ä¢ ${key}: "${value || 'VIDE'}"`);
      });
      console.log('');

      // Simuler le mapping DB ‚Üí Facture
      const dbToInvoice = {
        name: 'DINY Oili', // ‚úÖ R√©cup√©r√© depuis user.firstName/lastName
        address: apiToDb.street,     // ‚úÖ street ‚Üí address
        city: apiToDb.city,          // ‚úÖ city ‚Üí city
        postalCode: apiToDb.zipCode, // ‚úÖ zipCode ‚Üí postalCode
        country: apiToDb.country,    // ‚úÖ country ‚Üí country
        phone: apiToDb.phoneNumber   // ‚úÖ phoneNumber ‚Üí phone
      };

      console.log('   üßæ MAPPING DB ‚Üí FACTURE:');
      Object.entries(dbToInvoice).forEach(([key, value]) => {
        console.log(`   ‚Ä¢ ${key}: "${value || 'VIDE'}"`);
      });
    } else {
      console.log('   ‚ùå Aucune adresse valide trouv√©e pour le test');
    }

    console.log('');
    console.log('üéØ ANALYSE DE COMPATIBILIT√â:');
    console.log('');

    console.log('‚úÖ CHAMPS COMPATIBLES:');
    console.log('   ‚Ä¢ street/address/address: ‚úÖ Mapp√© correctement');
    console.log('   ‚Ä¢ city: ‚úÖ Identique partout');
    console.log('   ‚Ä¢ zipCode/postalCode: ‚úÖ Mapp√© correctement');
    console.log('   ‚Ä¢ country: ‚úÖ Identique partout');
    console.log('   ‚Ä¢ phoneNumber/phone: ‚úÖ Mapp√© correctement');
    console.log('');

    console.log('‚ö†Ô∏è  CHAMPS AVEC ATTENTION:');
    console.log('   ‚Ä¢ firstName/lastName: Pas sauv√©s dans Address, r√©cup√©r√©s depuis User');
    console.log('   ‚Ä¢ state: Existe en DB mais pas utilis√© dans checkout/facture');
    console.log('');

    console.log('‚ùå PROBL√àMES POTENTIELS:');
    console.log('   ‚Ä¢ Si user.firstName/lastName vides ‚Üí Nom vide dans facture');
    console.log('   ‚Ä¢ state toujours NULL car pas rempli');
    console.log('');

    console.log('üí° RECOMMANDATIONS:');
    console.log('   1. ‚úÖ Mappings actuels sont corrects');
    console.log('   2. ‚ö†Ô∏è  V√©rifier que user.firstName/lastName sont toujours remplis');
    console.log('   3. üîÑ Optionnel: Ajouter champ state au checkout si n√©cessaire');
    console.log('   4. ‚úÖ D√©duplication fonctionne avec les bons champs');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

verifyAddressFieldsCompatibility();
