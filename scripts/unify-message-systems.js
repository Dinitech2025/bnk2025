const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function unifyMessageSystems() {
  console.log('üîÑ Unification des syst√®mes de messagerie...\n')
  console.log('üìã Cette migration va:')
  console.log('   1. Migrer tous les QuoteMessage vers Message')
  console.log('   2. Cr√©er des conversations pour chaque devis')
  console.log('   3. Pr√©server toutes les donn√©es existantes')
  console.log('   4. Maintenir le workflow de demande de devis\n')

  try {
    // 1. Analyser l'existant
    console.log('1Ô∏è‚É£ Analyse des donn√©es existantes...')
    const quoteMessagesCount = await prisma.quoteMessage.count()
    const messagesCount = await prisma.message.count()
    const quotesCount = await prisma.quote.count()
    
    console.log(`   üìä QuoteMessage: ${quoteMessagesCount}`)
    console.log(`   üìä Message: ${messagesCount}`)
    console.log(`   üìä Quote: ${quotesCount}\n`)

    if (quoteMessagesCount === 0) {
      console.log('‚úÖ Aucun QuoteMessage √† migrer. Syst√®me d√©j√† unifi√©.')
      return
    }

    // 2. R√©cup√©rer tous les QuoteMessage avec leurs relations
    console.log('2Ô∏è‚É£ R√©cup√©ration des QuoteMessage...')
    const quoteMessages = await prisma.quoteMessage.findMany({
      include: {
        quote: {
          include: {
            user: {
              select: {
                id: true,
                name: true,
                email: true,
                role: true
              }
            },
            service: {
              select: {
                id: true,
                name: true,
                slug: true
              }
            }
          }
        },
        sender: {
          select: {
            id: true,
            name: true,
            email: true,
            role: true
          }
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    })

    console.log(`   ‚úÖ ${quoteMessages.length} messages trouv√©s\n`)

    // 3. Cr√©er ou r√©cup√©rer les conversations pour chaque devis
    console.log('3Ô∏è‚É£ Cr√©ation des conversations...')
    const conversationMap = new Map() // quoteId -> conversationId
    const quoteIds = [...new Set(quoteMessages.map(qm => qm.quoteId))]

    for (const quoteId of quoteIds) {
      const quote = quoteMessages.find(qm => qm.quoteId === quoteId)?.quote
      if (!quote) continue

      // V√©rifier si une conversation existe d√©j√† pour ce devis
      const existingConversation = await prisma.conversation.findFirst({
        where: {
          messages: {
            some: {
              relatedQuoteId: quoteId
            }
          }
        }
      })

      if (existingConversation) {
        conversationMap.set(quoteId, existingConversation.id)
        console.log(`   ‚ôªÔ∏è Conversation existante pour devis ${quoteId.substring(0, 8)}...`)
      } else {
        // Cr√©er une nouvelle conversation
        const conversation = await prisma.conversation.create({
          data: {
            title: `Devis: ${quote.service.name}`,
            participants: [quote.userId],
            isActive: true,
            lastMessageAt: new Date()
          }
        })
        conversationMap.set(quoteId, conversation.id)
        console.log(`   ‚úÖ Nouvelle conversation cr√©√©e pour devis ${quoteId.substring(0, 8)}...`)
      }
    }

    console.log(`   üìä ${conversationMap.size} conversations pr√™tes\n`)

    // 4. Migrer les QuoteMessage vers Message
    console.log('4Ô∏è‚É£ Migration des messages...')
    let migratedCount = 0
    let skippedCount = 0
    const errors = []

    // Trouver un admin pour les messages
    const admin = await prisma.user.findFirst({
      where: { role: { in: ['ADMIN', 'STAFF'] } },
      select: { id: true, name: true }
    })

    if (!admin) {
      throw new Error('Aucun admin trouv√© pour la migration')
    }

    for (const qm of quoteMessages) {
      try {
        const conversationId = conversationMap.get(qm.quoteId)
        if (!conversationId) {
          console.log(`   ‚ö†Ô∏è Pas de conversation pour ${qm.id}, skip`)
          skippedCount++
          continue
        }

        // V√©rifier si ce message a d√©j√† √©t√© migr√©
        const existingMessage = await prisma.message.findFirst({
          where: {
            relatedQuoteId: qm.quoteId,
            sentAt: qm.createdAt,
            content: qm.message
          }
        })

        if (existingMessage) {
          console.log(`   ‚è≠Ô∏è Message ${qm.id.substring(0, 8)}... d√©j√† migr√©`)
          skippedCount++
          continue
        }

        // D√©terminer exp√©diteur et destinataire
        const isClientSender = qm.sender.role === 'CLIENT'
        const fromUserId = qm.senderId
        const toUserId = isClientSender ? admin.id : qm.quote.userId

        // D√©terminer le type de message
        let messageType = 'GENERAL'
        let priority = 'NORMAL'
        let subject = `Message sur devis ${qm.quote.service.name}`

        if (qm.proposedPrice && Number(qm.proposedPrice) > 0) {
          messageType = 'QUOTE_PRICE_PROPOSAL'
          priority = 'HIGH'
          subject = `Proposition de prix: ${Number(qm.proposedPrice).toLocaleString('fr-FR')} Ar`
        }

        // Cr√©er le message unifi√©
        const newMessage = await prisma.message.create({
          data: {
            subject,
            content: qm.message,
            type: messageType,
            priority,
            status: 'READ', // Messages historiques d√©j√† lus
            fromUserId,
            toUserId,
            conversationId,
            relatedQuoteId: qm.quoteId,
            relatedServiceId: qm.quote.serviceId,
            metadata: {
              migratedFrom: 'QuoteMessage',
              originalQuoteMessageId: qm.id,
              proposedPrice: qm.proposedPrice ? Number(qm.proposedPrice) : null,
              attachments: qm.attachments || [],
              migrationDate: new Date().toISOString()
            },
            sentAt: qm.createdAt,
            createdAt: qm.createdAt,
            updatedAt: qm.createdAt
          }
        })

        migratedCount++
        console.log(`   ‚úÖ ${migratedCount}/${quoteMessages.length} - ${qm.quote.service.name} (${qm.id.substring(0, 8)}...)`)

      } catch (error) {
        console.error(`   ‚ùå Erreur pour message ${qm.id}:`, error.message)
        errors.push({ id: qm.id, error: error.message })
      }
    }

    console.log(`\n5Ô∏è‚É£ Mise √† jour des conversations...`)
    // Mettre √† jour lastMessageAt pour chaque conversation
    for (const [quoteId, conversationId] of conversationMap.entries()) {
      const lastMessage = await prisma.message.findFirst({
        where: { conversationId },
        orderBy: { sentAt: 'desc' }
      })

      if (lastMessage) {
        await prisma.conversation.update({
          where: { id: conversationId },
          data: { lastMessageAt: lastMessage.sentAt }
        })
      }
    }
    console.log(`   ‚úÖ ${conversationMap.size} conversations mises √† jour\n`)

    // 6. R√©sum√©
    console.log('üìä R√âSUM√â DE LA MIGRATION:')
    console.log(`   ‚úÖ Messages migr√©s: ${migratedCount}`)
    console.log(`   ‚è≠Ô∏è Messages ignor√©s (d√©j√† migr√©s): ${skippedCount}`)
    console.log(`   ‚ùå Erreurs: ${errors.length}`)
    console.log(`   üìÅ Conversations cr√©√©es: ${conversationMap.size}`)

    if (errors.length > 0) {
      console.log('\n‚ö†Ô∏è Erreurs d√©taill√©es:')
      errors.forEach(err => {
        console.log(`   - ${err.id}: ${err.error}`)
      })
    }

    // 7. V√©rification
    console.log('\n6Ô∏è‚É£ V√©rification de l\'int√©grit√©...')
    const newMessagesCount = await prisma.message.count({
      where: {
        metadata: {
          path: ['migratedFrom'],
          equals: 'QuoteMessage'
        }
      }
    })
    console.log(`   ‚úÖ ${newMessagesCount} messages migr√©s trouv√©s dans Message`)

    // 8. Proposition de nettoyage
    console.log('\n7Ô∏è‚É£ Nettoyage (optionnel):')
    console.log('   ‚ö†Ô∏è Les QuoteMessage originaux sont conserv√©s pour s√©curit√©')
    console.log('   üí° Pour les supprimer apr√®s v√©rification, ex√©cutez:')
    console.log('      node scripts/cleanup-old-quote-messages.js')

    console.log('\n‚úÖ MIGRATION TERMIN√âE AVEC SUCC√àS!')
    console.log('\nüéâ Le syst√®me de messagerie est maintenant unifi√©!')
    console.log('   üìã Tous les messages de devis sont dans la table Message')
    console.log('   üí¨ Les conversations sont cr√©√©es et li√©es')
    console.log('   üîÑ Le workflow de devis est pr√©serv√©')
    console.log('   ‚ú® Interface moderne disponible dans /admin/messages')

  } catch (error) {
    console.error('\n‚ùå ERREUR CRITIQUE:', error)
    console.error('Stack:', error.stack)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter la migration
unifyMessageSystems()
  .then(() => {
    console.log('\n‚úÖ Script termin√© avec succ√®s')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Script √©chou√©:', error)
    process.exit(1)
  })

