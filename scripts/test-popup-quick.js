const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testPopupQuick() {
  console.log('üîç Test rapide du popup d\'abonnements')
  console.log('=' .repeat(40))

  try {
    // 1. R√©cup√©rer une offre Netflix
    const netflixOffer = await prisma.offer.findFirst({
      include: {
        platformOffers: {
          include: {
            platform: true
          }
        }
      },
      where: {
        platformOffers: {
          some: {
            platform: {
              name: 'Netflix'
            }
          }
        }
      }
    })

    if (!netflixOffer) {
      console.log('‚ùå Aucune offre Netflix trouv√©e')
      return
    }

    console.log(`‚úÖ Offre trouv√©e: ${netflixOffer.name}`)
    const platformId = netflixOffer.platformOffers[0].platform.id
    console.log(`üìã Platform ID: ${platformId}`)

    // 2. Tester l'API des comptes
    console.log('\nüîç Test de l\'API des comptes...')
    try {
      const response = await fetch(`http://localhost:3000/api/admin/streaming/accounts?platformId=${platformId}`)
      
      if (response.ok) {
        const accounts = await response.json()
        console.log(`‚úÖ ${accounts.length} comptes r√©cup√©r√©s`)
        
        accounts.forEach((acc, index) => {
          console.log(`   ${index + 1}. ${acc.email} - ${acc.availableProfiles}/${acc.maxProfiles} profils disponibles`)
        })

        // 3. Tester l'API des profils pour le premier compte
        if (accounts.length > 0) {
          console.log('\nüîç Test de l\'API des profils...')
          const firstAccount = accounts[0]
          
          const profilesResponse = await fetch(`http://localhost:3000/api/admin/streaming/profiles?accountId=${firstAccount.id}`)
          
          if (profilesResponse.ok) {
            const profiles = await profilesResponse.json()
            console.log(`‚úÖ ${profiles.length} profils r√©cup√©r√©s pour ${firstAccount.email}`)
            
            const availableProfiles = profiles.filter(p => !p.isUsed)
            console.log(`   - ${availableProfiles.length} profils disponibles`)
            
            availableProfiles.forEach(profile => {
              console.log(`     * ${profile.name} (Slot ${profile.profileSlot})`)
            })
          } else {
            console.log(`‚ùå Erreur API profils: ${profilesResponse.status}`)
          }
        }
      } else {
        console.log(`‚ùå Erreur API comptes: ${response.status}`)
      }
    } catch (error) {
      console.log('‚ùå Serveur non accessible:', error.message)
    }

    console.log('\nüéØ Instructions pour tester le popup:')
    console.log('1. Aller sur http://localhost:3000/subscriptions')
    console.log('2. Ouvrir la console du navigateur (F12)')
    console.log('3. Cliquer sur "Choisir" pour une offre Netflix')
    console.log('4. V√©rifier les logs "Comptes r√©cup√©r√©s" dans la console')
    console.log('5. Le popup devrait maintenant afficher les comptes')

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testPopupQuick() 