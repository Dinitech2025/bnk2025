const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testTaskSystem() {
  console.log('üß™ Test du syst√®me de gestion de t√¢ches\n')
  
  try {
    // 1. V√©rifier que la table Task existe
    console.log('1Ô∏è‚É£ V√©rification de la table Task...')
    const taskCount = await prisma.task.count()
    console.log(`‚úÖ Table Task accessible. ${taskCount} t√¢ches existantes.\n`)

    // 2. Cr√©er une t√¢che de test
    console.log('2Ô∏è‚É£ Cr√©ation d\'une t√¢che de test...')
    const testTask = await prisma.task.create({
      data: {
        title: 'T√¢che de test syst√®me',
        description: 'Ceci est une t√¢che de test pour v√©rifier le bon fonctionnement du syst√®me',
        type: 'CUSTOM',
        priority: 'MEDIUM',
        status: 'PENDING',
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Dans 7 jours
        metadata: {
          test: true,
          createdBy: 'test-script'
        }
      }
    })
    console.log(`‚úÖ T√¢che cr√©√©e avec succ√®s: ${testTask.id}\n`)

    // 3. Lire la t√¢che
    console.log('3Ô∏è‚É£ Lecture de la t√¢che...')
    const readTask = await prisma.task.findUnique({
      where: { id: testTask.id }
    })
    console.log(`‚úÖ T√¢che lue: ${readTask.title}\n`)

    // 4. Mettre √† jour la t√¢che
    console.log('4Ô∏è‚É£ Mise √† jour du statut...')
    const updatedTask = await prisma.task.update({
      where: { id: testTask.id },
      data: {
        status: 'IN_PROGRESS'
      }
    })
    console.log(`‚úÖ Statut mis √† jour: ${updatedTask.status}\n`)

    // 5. Compl√©ter la t√¢che
    console.log('5Ô∏è‚É£ Compl√©tion de la t√¢che...')
    const completedTask = await prisma.task.update({
      where: { id: testTask.id },
      data: {
        status: 'COMPLETED',
        completedAt: new Date()
      }
    })
    console.log(`‚úÖ T√¢che compl√©t√©e √†: ${completedTask.completedAt}\n`)

    // 6. Tester les filtres
    console.log('6Ô∏è‚É£ Test des filtres...')
    const pendingTasks = await prisma.task.findMany({
      where: { status: 'PENDING' },
      take: 5
    })
    console.log(`‚úÖ ${pendingTasks.length} t√¢ches en attente trouv√©es\n`)

    const urgentTasks = await prisma.task.findMany({
      where: { 
        priority: 'URGENT',
        status: { in: ['PENDING', 'IN_PROGRESS'] }
      },
      take: 5
    })
    console.log(`‚úÖ ${urgentTasks.length} t√¢ches urgentes trouv√©es\n`)

    // 7. Supprimer la t√¢che de test
    console.log('7Ô∏è‚É£ Nettoyage...')
    await prisma.task.delete({
      where: { id: testTask.id }
    })
    console.log(`‚úÖ T√¢che de test supprim√©e\n`)

    // 8. Statistiques globales
    console.log('8Ô∏è‚É£ Statistiques globales:')
    const stats = await prisma.task.groupBy({
      by: ['status'],
      _count: true
    })
    console.log('\nR√©partition par statut:')
    stats.forEach(stat => {
      console.log(`  - ${stat.status}: ${stat._count} t√¢ches`)
    })

    const priorityStats = await prisma.task.groupBy({
      by: ['priority'],
      _count: true
    })
    console.log('\nR√©partition par priorit√©:')
    priorityStats.forEach(stat => {
      console.log(`  - ${stat.priority}: ${stat._count} t√¢ches`)
    })

    const typeStats = await prisma.task.groupBy({
      by: ['type'],
      _count: true
    })
    console.log('\nR√©partition par type:')
    typeStats.forEach(stat => {
      console.log(`  - ${stat.type}: ${stat._count} t√¢ches`)
    })

    console.log('\n‚ú® Tous les tests sont pass√©s avec succ√®s!')
    console.log('üéâ Le syst√®me de gestion de t√¢ches fonctionne correctement.\n')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
    console.error('\n‚ö†Ô∏è  Le syst√®me de t√¢ches n\'est pas correctement configur√©.')
    console.error('üí° Assurez-vous d\'avoir ex√©cut√© la migration SQL:')
    console.error('   psql $DATABASE_URL -f prisma/migrations/add_task_model.sql\n')
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter les tests
testTaskSystem()

