// Configuration des environnements de d√©veloppement
const fs = require('fs')
const path = require('path')

console.log('üîß CONFIGURATION ENVIRONNEMENT D√âVELOPPEMENT')
console.log('=============================================\n')

const envPath = path.join(__dirname, '..', '.env')

console.log('üéØ CHOIX D\'ENVIRONNEMENT:')
console.log('=========================')
console.log('')
console.log('1. üåê HTTP (Recommand√© pour d√©veloppement)')
console.log('   ‚úÖ Pas d\'alertes de certificat')
console.log('   ‚úÖ Configuration simple')
console.log('   ‚ùå Peut d√©clencher alertes de s√©curit√© Chrome')
console.log('')
console.log('2. üîí HTTPS (Recommand√© pour production)')
console.log('   ‚úÖ S√©curis√© et conforme')
console.log('   ‚úÖ Pas d\'alertes de s√©curit√©')
console.log('   ‚ùå N√©cessite certificat auto-sign√© en local')
console.log('')

// Configuration HTTP pour d√©veloppement
const httpConfig = `# Base de donn√©es
DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiMDFKWkE2QlhFUFhUTTJQSDdYTlExWjBOODQiLCJ0ZW5hbnRfaWQiOiJhYzc4ZmU4YWI2MzBkZTNhOWI4ZThmMjA0M2QwNDY5NDYwOWQxNDhmNzgyZDE5MzY3MjM3ODMwZDVkNTI3NWQxIiwiaW50ZXJuYWxfc2VjcmV0IjoiNGMxZWZmZDMtNWI0My00NzhhLWIwOGQtZDJmN2RiNGUzZWU0In0.aHGFESZ8psE9mxW3Wj7UHscLc37eN3wdPQhDdli_P8U"

# NextAuth.js
NEXTAUTH_SECRET="your-secret-key"
NEXTAUTH_URL=http://localhost:3000

# URLs de base
NEXT_PUBLIC_BASE_URL=http://localhost:3000

# PayPal Configuration
PAYPAL_CLIENT_ID=ARhWb68VmOrhIvTOuoLjMgVKwmz-bsQ4gZEKCqf7ynUVrmILXF8UH7Z8xxSjhxdSdUaC9fK8LjA8BbYj
PAYPAL_CLIENT_SECRET=ELh2KWbUhHaDJWW5k0hU96IZpBZXcL4yQgLVGmxnfTi0pz37zl8nTjbvBOhN-9pF7bP9qZ3E8sY4D5X7
NEXT_PUBLIC_PAYPAL_CLIENT_ID=ARhWb68VmOrhIvTOuoLjMgVKwmz-bsQ4gZEKCqf7ynUVrmILXF8UH7Z8xxSjhxdSdUaC9fK8LjA8BbYj
PAYPAL_MODE=sandbox

# Autres configurations...`

// Configuration HTTPS pour d√©veloppement
const httpsConfig = httpConfig.replace(/http:\/\/localhost:3000/g, 'https://localhost:3000')

console.log('üíª CONFIGURATION HTTP (D√©veloppement Simple):')
console.log('==============================================')
console.log('NEXTAUTH_URL=http://localhost:3000')
console.log('NEXT_PUBLIC_BASE_URL=http://localhost:3000')
console.log('')

console.log('üîí CONFIGURATION HTTPS (S√©curis√©):')
console.log('==================================')
console.log('NEXTAUTH_URL=https://localhost:3000')
console.log('NEXT_PUBLIC_BASE_URL=https://localhost:3000')
console.log('')

console.log('‚ö†Ô∏è  POUR UTILISER HTTPS EN D√âVELOPPEMENT:')
console.log('=========================================')
console.log('')
console.log('Option 1: mkcert (Recommand√©)')
console.log('------------------------------')
console.log('npm install -g mkcert')
console.log('mkcert -install')
console.log('mkcert localhost 127.0.0.1 ::1')
console.log('')

console.log('Option 2: Flags Chrome')
console.log('----------------------')
console.log('chrome --ignore-certificate-errors --ignore-ssl-errors --allow-running-insecure-content')
console.log('Ou chrome://flags/#allow-insecure-localhost ‚Üí Enabled')
console.log('')

console.log('Option 3: Flags Firefox')
console.log('-----------------------')
console.log('about:config ‚Üí security.insecure_connection_text.enabled ‚Üí false')
console.log('')

console.log('üöÄ RECOMMANDATION POUR VOTRE CAS:')
console.log('=================================')
console.log('')
console.log('Pour r√©soudre imm√©diatement l\'alerte Google Safe Browsing :')
console.log('')
console.log('1. üîÑ Garder HTTP en d√©veloppement')
console.log('2. üõ°Ô∏è Utiliser HTTPS en production uniquement')
console.log('3. üéØ Ajouter d√©tection dynamique d\'environnement')
console.log('')

console.log('Cela permettra de :')
console.log('‚úÖ √âliminer les URLs HTTP du code de production')
console.log('‚úÖ Garder la simplicit√© en d√©veloppement')
console.log('‚úÖ Supprimer l\'alerte de s√©curit√© Chrome')
console.log('')

// Fonction pour choisir la configuration
function chooseConfiguration(useHttps = false) {
  const config = useHttps ? httpsConfig : httpConfig
  
  try {
    // Backup de l'ancien fichier
    if (fs.existsSync(envPath)) {
      fs.writeFileSync(envPath + '.backup', fs.readFileSync(envPath, 'utf8'))
      console.log('‚úÖ Sauvegarde .env cr√©√©e')
    }
    
    // √âcrire la nouvelle configuration
    fs.writeFileSync(envPath, config)
    console.log(`‚úÖ Configuration ${useHttps ? 'HTTPS' : 'HTTP'} appliqu√©e`)
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message)
  }
}

console.log('üéØ CONFIGURATION ACTUELLE MAINTENUE')
console.log('===================================')
console.log('Le fichier .env garde sa configuration HTTPS actuelle.')
console.log('Si vous avez des probl√®mes de certificat, utilisez les flags Chrome.')
console.log('')

console.log('üìã ACTIONS RECOMMAND√âES:')
console.log('========================')
console.log('1. Red√©marrer le serveur de d√©veloppement')
console.log('2. Tester avec Chrome + flags si n√©cessaire')
console.log('3. V√©rifier que l\'alerte de s√©curit√© a disparu')
console.log('4. D√©ployer en production avec HTTPS natif')
console.log('')

console.log('‚úÖ Configuration d\'environnement pr√™te ! üöÄ')
