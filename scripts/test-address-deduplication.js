#!/usr/bin/env node

// Test de la d√©duplication d'adresses
async function testAddressDeduplication() {
  console.log('üîÑ TEST D√âDUPLICATION ADRESSES');
  console.log('==============================');
  console.log('');

  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();

  try {
    // V√©rifier l'√©tat initial
    const initialAddresses = await prisma.address.findMany({
      where: { 
        user: { email: 'dinyoili@outlook.com' }
      }
    });

    console.log('üìä √âTAT INITIAL:');
    console.log('   ‚Ä¢ Adresses existantes:', initialAddresses.length);
    console.log('');

    // Donn√©es de test avec la M√äME adresse
    const sameAddressData = {
      firstName: 'DINY',
      lastName: 'Oili',
      address: '162 LB Lazaret Nord',
      city: 'Diego',
      postalCode: '201',
      country: 'Madagascar',
      phone: '+261325550444'
    };

    // Test 1: Premi√®re commande avec cette adresse
    console.log('üß™ TEST 1: Premi√®re commande avec adresse');
    const order1Data = {
      items: [{
        id: 'test-dedup-1',
        name: 'Test D√©duplication 1',
        price: 10000,
        quantity: 1,
        type: 'product',
        metadata: { name: 'Test D√©duplication 1' }
      }],
      total: 10000,
      currency: 'Ar',
      shippingAddress: sameAddressData,
      billingAddress: sameAddressData,
      email: 'dinyoili@outlook.com',
      phone: '+261325550444',
      firstName: 'DINY',
      lastName: 'Oili',
      paymentData: {
        method: 'paypal',
        status: 'completed',
        transactionId: 'DEDUP-TEST-1-' + Date.now(),
        amount: 10000
      },
      notes: 'Test d√©duplication - Commande 1'
    };

    const response1 = await fetch('http://localhost:3000/api/orders/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(order1Data)
    });

    if (!response1.ok) {
      const error1 = await response1.json();
      console.log('‚ùå Erreur commande 1:', error1.error);
      return;
    }

    const result1 = await response1.json();
    console.log('‚úÖ Commande 1 cr√©√©e:', result1.order.orderNumber);

    // V√©rifier les adresses apr√®s la premi√®re commande
    const addressesAfterOrder1 = await prisma.address.findMany({
      where: { 
        user: { email: 'dinyoili@outlook.com' }
      }
    });

    console.log('   ‚Ä¢ Adresses apr√®s commande 1:', addressesAfterOrder1.length);
    console.log('');

    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Test 2: Deuxi√®me commande avec la M√äME adresse
    console.log('üß™ TEST 2: Deuxi√®me commande avec M√äME adresse');
    const order2Data = {
      ...order1Data,
      items: [{
        id: 'test-dedup-2',
        name: 'Test D√©duplication 2',
        price: 20000,
        quantity: 1,
        type: 'product',
        metadata: { name: 'Test D√©duplication 2' }
      }],
      total: 20000,
      paymentData: {
        method: 'paypal',
        status: 'completed',
        transactionId: 'DEDUP-TEST-2-' + Date.now(),
        amount: 20000
      },
      notes: 'Test d√©duplication - Commande 2 (m√™me adresse)'
    };

    const response2 = await fetch('http://localhost:3000/api/orders/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(order2Data)
    });

    if (!response2.ok) {
      const error2 = await response2.json();
      console.log('‚ùå Erreur commande 2:', error2.error);
      return;
    }

    const result2 = await response2.json();
    console.log('‚úÖ Commande 2 cr√©√©e:', result2.order.orderNumber);

    // V√©rifier les adresses apr√®s la deuxi√®me commande
    const addressesAfterOrder2 = await prisma.address.findMany({
      where: { 
        user: { email: 'dinyoili@outlook.com' }
      }
    });

    console.log('   ‚Ä¢ Adresses apr√®s commande 2:', addressesAfterOrder2.length);
    console.log('');

    // Test 3: Troisi√®me commande avec adresse DIFF√âRENTE
    console.log('üß™ TEST 3: Troisi√®me commande avec adresse DIFF√âRENTE');
    const differentAddressData = {
      firstName: 'DINY',
      lastName: 'Oili',
      address: '456 Avenue Nouvelle',  // Adresse diff√©rente
      city: 'Antananarivo',           // Ville diff√©rente
      postalCode: '101',              // Code postal diff√©rent
      country: 'Madagascar',
      phone: '+261325550444'
    };

    const order3Data = {
      ...order1Data,
      items: [{
        id: 'test-dedup-3',
        name: 'Test D√©duplication 3',
        price: 30000,
        quantity: 1,
        type: 'product',
        metadata: { name: 'Test D√©duplication 3' }
      }],
      total: 30000,
      shippingAddress: differentAddressData,
      billingAddress: differentAddressData,
      paymentData: {
        method: 'paypal',
        status: 'completed',
        transactionId: 'DEDUP-TEST-3-' + Date.now(),
        amount: 30000
      },
      notes: 'Test d√©duplication - Commande 3 (adresse diff√©rente)'
    };

    const response3 = await fetch('http://localhost:3000/api/orders/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(order3Data)
    });

    if (!response3.ok) {
      const error3 = await response3.json();
      console.log('‚ùå Erreur commande 3:', error3.error);
      return;
    }

    const result3 = await response3.json();
    console.log('‚úÖ Commande 3 cr√©√©e:', result3.order.orderNumber);

    // V√©rifier les adresses finales
    const finalAddresses = await prisma.address.findMany({
      where: { 
        user: { email: 'dinyoili@outlook.com' }
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log('   ‚Ä¢ Adresses apr√®s commande 3:', finalAddresses.length);
    console.log('');

    console.log('üìã R√âSUM√â DES ADRESSES:');
    finalAddresses.forEach((addr, index) => {
      console.log(`   ${index + 1}. ${addr.street}, ${addr.city} ${addr.zipCode}`);
      console.log(`      Type: ${addr.type} | ID: ${addr.id}`);
    });
    console.log('');

    console.log('üéØ R√âSULTATS ATTENDUS:');
    console.log('   ‚Ä¢ Commande 1: Cr√©e 2 nouvelles adresses (livraison + facturation)');
    console.log('   ‚Ä¢ Commande 2: R√©utilise les adresses existantes (pas de cr√©ation)');
    console.log('   ‚Ä¢ Commande 3: Cr√©e 2 nouvelles adresses (adresse diff√©rente)');
    console.log('   ‚Ä¢ Total attendu: 4 adresses maximum');
    console.log('');

    const expectedAddresses = initialAddresses.length + 4; // 2 pour premi√®re commande + 2 pour troisi√®me
    const actualAddresses = finalAddresses.length;

    console.log('üîç V√âRIFICATION D√âDUPLICATION:');
    console.log('   ‚Ä¢ Adresses initiales:', initialAddresses.length);
    console.log('   ‚Ä¢ Adresses attendues:', expectedAddresses);
    console.log('   ‚Ä¢ Adresses r√©elles:', actualAddresses);
    
    if (actualAddresses <= expectedAddresses) {
      console.log('‚úÖ D√âDUPLICATION FONCTIONNE !');
      console.log('   ‚Ä¢ Pas de doublons cr√©√©s');
      console.log('   ‚Ä¢ Adresses r√©utilis√©es correctement');
    } else {
      console.log('‚ùå PROBL√àME DE D√âDUPLICATION');
      console.log('   ‚Ä¢ Trop d\'adresses cr√©√©es');
      console.log('   ‚Ä¢ Doublons possibles');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testAddressDeduplication();

