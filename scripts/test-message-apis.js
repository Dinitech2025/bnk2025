const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testMessageAPIs() {
  console.log('üß™ Test des APIs de messagerie...\n')

  try {
    // 1. Test de l'API publique (GET)
    console.log('1Ô∏è‚É£ Test API messages publique (GET)...')
    const publicResponse = await fetch('http://localhost:3000/api/public/messages?clientEmail=test@example.com')
    if (publicResponse.ok) {
      const publicData = await publicResponse.json()
      console.log(`‚úÖ Messages publique: ${publicData.messages?.length || 0} messages trouv√©s`)
    } else {
      console.log(`‚ùå Messages publique: ${publicResponse.status} ${publicResponse.statusText}`)
    }

    // 2. Test de l'API admin (GET) - sans auth (devrait √©chouer)
    console.log('\n2Ô∏è‚É£ Test API messages admin (GET)...')
    const adminResponse = await fetch('http://localhost:3000/api/admin/messages')
    if (adminResponse.ok) {
      const adminData = await adminResponse.json()
      console.log(`‚úÖ Messages admin: ${adminData.pagination?.total || 0} messages trouv√©s`)
    } else {
      console.log(`‚ùå Messages admin: ${adminResponse.status} ${adminResponse.statusText}`)
    }

    // 3. Test de l'API notifications (GET) - sans auth (devrait √©chouer)
    console.log('\n3Ô∏è‚É£ Test API notifications (GET)...')
    const notificationsResponse = await fetch('http://localhost:3000/api/admin/notifications')
    if (notificationsResponse.ok) {
      const notificationsData = await notificationsResponse.json()
      console.log(`‚úÖ Notifications: ${notificationsData.unreadCount || 0} notifications`)
    } else {
      console.log(`‚ùå Notifications: ${notificationsResponse.status} ${notificationsResponse.statusText}`)
    }

    // 4. Test de la cr√©ation d'un message public
    console.log('\n4Ô∏è‚É£ Test cr√©ation message public (POST)...')
    const createResponse = await fetch('http://localhost:3000/api/public/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        subject: 'Test message API',
        content: 'Ceci est un test du syst√®me de messagerie',
        clientEmail: 'test@example.com',
        clientName: 'Test Client',
        type: 'SUPPORT',
      }),
    })

    if (createResponse.ok) {
      const createData = await createResponse.json()
      console.log(`‚úÖ Message cr√©√©: ${createData.message}`)

      // 5. Test de r√©cup√©ration du message cr√©√©
      console.log('\n5Ô∏è‚É£ Test r√©cup√©ration du message cr√©√©...')
      const getCreatedResponse = await fetch(`http://localhost:3000/api/public/messages?clientEmail=test@example.com`)
      if (getCreatedResponse.ok) {
        const getCreatedData = await getCreatedResponse.json()
        console.log(`‚úÖ Message r√©cup√©r√©: ${getCreatedData.messages?.length || 0} messages trouv√©s`)
      } else {
        console.log(`‚ùå R√©cup√©ration message: ${getCreatedResponse.status} ${getCreatedResponse.statusText}`)
      }
    } else {
      console.log(`‚ùå Cr√©ation message: ${createResponse.status} ${createResponse.statusText}`)
    }

    console.log('\n‚ú® Tests des APIs de messagerie termin√©s!')

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter les tests si appel√© directement
if (require.main === module) {
  testMessageAPIs()
}

module.exports = { testMessageAPIs }
