#!/usr/bin/env node

// Nettoyer l'adresse vide probl√©matique
async function cleanEmptyAddress() {
  console.log('üßπ NETTOYAGE ADRESSE VIDE PROBL√âMATIQUE');
  console.log('======================================');
  console.log('');

  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();

  try {
    const emptyAddressId = 'cmgxrkt2c002xiogo97jppwuw';
    
    console.log('üîç V√©rification de l\'adresse vide:', emptyAddressId);
    
    const emptyAddress = await prisma.address.findUnique({
      where: { id: emptyAddressId },
      include: {
        orders: true,
        billingOrders: true
      }
    });

    if (!emptyAddress) {
      console.log('‚ùå Adresse non trouv√©e');
      return;
    }

    console.log('üìã D√âTAILS DE L\'ADRESSE:');
    console.log('   ‚Ä¢ Rue:', `"${emptyAddress.street || 'VIDE'}"`);
    console.log('   ‚Ä¢ Ville:', `"${emptyAddress.city || 'VIDE'}"`);
    console.log('   ‚Ä¢ Code postal:', `"${emptyAddress.zipCode || 'VIDE'}"`);
    console.log('   ‚Ä¢ Pays:', `"${emptyAddress.country || 'VIDE'}"`);
    console.log('   ‚Ä¢ Type:', emptyAddress.type);
    console.log('');

    console.log('üîó UTILISATION:');
    console.log('   ‚Ä¢ Commandes (shipping):', emptyAddress.orders.length);
    console.log('   ‚Ä¢ Commandes (billing):', emptyAddress.billingOrders.length);
    
    if (emptyAddress.orders.length > 0) {
      console.log('   üì¶ Commandes shipping:');
      emptyAddress.orders.forEach(order => {
        console.log(`      - ${order.orderNumber} (${order.status})`);
      });
    }
    
    if (emptyAddress.billingOrders.length > 0) {
      console.log('   üßæ Commandes billing:');
      emptyAddress.billingOrders.forEach(order => {
        console.log(`      - ${order.orderNumber} (${order.status})`);
      });
    }

    const isEmpty = !emptyAddress.street && !emptyAddress.city && !emptyAddress.zipCode;
    
    if (isEmpty) {
      console.log('');
      console.log('‚ö†Ô∏è  ADRESSE CONFIRM√âE COMME VIDE');
      console.log('');
      console.log('üí° RECOMMANDATION:');
      console.log('   ‚Ä¢ Cette adresse vide ne devrait plus √™tre r√©utilis√©e');
      console.log('   ‚Ä¢ La logique API a √©t√© mise √† jour pour l\'ignorer');
      console.log('   ‚Ä¢ Les nouvelles commandes cr√©eront de nouvelles adresses');
      console.log('');
      console.log('‚úÖ AUCUNE ACTION N√âCESSAIRE');
      console.log('   ‚Üí L\'adresse reste pour l\'historique');
      console.log('   ‚Üí Mais ne sera plus r√©utilis√©e');
    } else {
      console.log('');
      console.log('‚úÖ Adresse non vide, pas de probl√®me');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

cleanEmptyAddress();

