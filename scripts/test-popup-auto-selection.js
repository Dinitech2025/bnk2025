const { execSync } = require('child_process')

console.log('ü§ñ Test du popup avec s√©lection automatique')
console.log('=' .repeat(50))

try {
  // D√©marrer le serveur en arri√®re-plan
  console.log('üöÄ D√©marrage du serveur Next.js...')
  const serverProcess = require('child_process').spawn('npm', ['run', 'dev'], {
    stdio: 'pipe',
    shell: true
  })

  // Attendre que le serveur d√©marre
  console.log('‚è≥ Attente du d√©marrage du serveur (10 secondes)...')
  
  setTimeout(() => {
    console.log('\nüìã Instructions pour tester la s√©lection automatique:')
    console.log('1. Ouvrez votre navigateur √† http://localhost:3000')
    console.log('2. Allez sur la page des abonnements (/subscriptions)')
    console.log('3. Cliquez sur "S\'abonner" pour une offre')
    console.log('4. Observez la s√©lection automatique dans le popup')
    console.log('\nüéØ Algorithme de s√©lection:')
    console.log('‚Ä¢ S√©lection du compte avec le minimum de profils libres n√©cessaires')
    console.log('‚Ä¢ En cas d\'√©galit√©, privil√©gie le compte avec moins de profils totaux')
    console.log('‚Ä¢ S√©lection automatique des profils par ordre de priorit√©')
    console.log('‚Ä¢ Le profil "Principal" est toujours s√©lectionn√© en premier')
    console.log('\nüîç V√©rifications √† faire:')
    console.log('‚Ä¢ Le compte optimal est automatiquement s√©lectionn√©')
    console.log('‚Ä¢ Les profils sont s√©lectionn√©s automatiquement')
    console.log('‚Ä¢ L\'ic√¥ne couronne (üëë) appara√Æt sur les √©l√©ments auto-s√©lectionn√©s')
    console.log('‚Ä¢ Le message de confirmation appara√Æt')
    console.log('‚Ä¢ Vous pouvez toujours modifier la s√©lection manuellement')
    console.log('\nüí° Exemples de tests:')
    console.log('‚Ä¢ Netflix Standard (2 profils) ‚Üí devrait choisir netflix2@test.com (2/2 profils)')
    console.log('‚Ä¢ Netflix Premium (4 profils) ‚Üí devrait choisir netflix1@test.com (4/4 profils)')
    console.log('‚Ä¢ Spotify Premium (1 profil) ‚Üí devrait choisir le compte avec le moins de gaspillage')
    
    console.log('\n‚ú® Appuyez sur Ctrl+C pour arr√™ter le serveur')
  }, 10000)

  // G√©rer l'arr√™t propre
  process.on('SIGINT', () => {
    console.log('\nüõë Arr√™t du serveur...')
    serverProcess.kill('SIGTERM')
    process.exit(0)
  })

  // Afficher les logs du serveur
  serverProcess.stdout.on('data', (data) => {
    const output = data.toString()
    if (output.includes('Ready') || output.includes('started server') || output.includes('Local:')) {
      console.log('‚úÖ Serveur pr√™t!')
    }
  })

  serverProcess.stderr.on('data', (data) => {
    const error = data.toString()
    if (error.includes('Error') || error.includes('error')) {
      console.error('‚ùå Erreur serveur:', error)
    }
  })

} catch (error) {
  console.error('‚ùå Erreur lors du d√©marrage:', error.message)
} 