const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function quickSetupPayments() {
  try {
    console.log('‚ö° Configuration rapide des m√©thodes de paiement...')

    // Supprimer les anciennes donn√©es pour repartir proprement
    await prisma.paymentProvider.deleteMany({})
    await prisma.paymentMethod.deleteMany({})
    
    console.log('üßπ Anciennes donn√©es supprim√©es')

    // 1. Cr√©er la m√©thode PayPal avec ses fournisseurs
    const paypalMethod = await prisma.paymentMethod.create({
      data: {
        code: 'paypal',
        name: 'Paiement en ligne',
        description: 'Paiement s√©curis√© en ligne via PayPal, cartes bancaires, Google Pay, etc.',
        type: 'PROVIDERS',
        icon: 'CreditCard',
        isActive: true,
        order: 1,
        apiEnabled: true,
        providers: {
          create: [
            {
              code: 'paypal_api',
              name: 'PayPal',
              description: 'Paiement avec compte PayPal',
              isActive: true,
              order: 1,
              settings: {
                environment: process.env.PAYPAL_ENVIRONMENT || 'sandbox',
                clientId: process.env.PAYPAL_CLIENT_ID || process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID || '',
                clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',
                currency: 'EUR',
                conversionRate: 5000,
                autoConvert: true
              }
            },
            {
              code: 'paypal_card',
              name: 'Carte bancaire',
              description: 'Paiement par carte bancaire via PayPal (sans compte)',
              isActive: true,
              order: 2,
              settings: {
                environment: process.env.PAYPAL_ENVIRONMENT || 'sandbox',
                clientId: process.env.PAYPAL_CLIENT_ID || process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID || '',
                clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',
                currency: 'EUR',
                conversionRate: 5000,
                autoConvert: true,
                cardOnly: true
              }
            }
          ]
        }
      }
    })
    console.log('‚úÖ M√©thode PayPal cr√©√©e avec 2 fournisseurs')

    // 2. Cr√©er Mobile Money
    const mobileMethod = await prisma.paymentMethod.create({
      data: {
        code: 'mobile_money',
        name: 'Mobile Money',
        description: 'Paiement via portefeuille mobile',
        type: 'PROVIDERS',
        icon: 'Smartphone',
        isActive: true,
        order: 2,
        apiEnabled: false,
        providers: {
          create: [
            {
              code: 'mvola',
              name: 'MVola',
              description: 'Paiement via MVola (Telma)',
              isActive: false, // D√©sactiv√© en attendant l'API
              order: 1,
              settings: {
                apiUrl: '',
                merchantId: '',
                secretKey: ''
              }
            },
            {
              code: 'orange_money',
              name: 'Orange Money',
              description: 'Paiement via Orange Money',
              isActive: false, // D√©sactiv√© en attendant l'API
              order: 2,
              settings: {
                apiUrl: '',
                merchantId: '',
                secretKey: ''
              }
            }
          ]
        }
      }
    })
    console.log('‚úÖ M√©thode Mobile Money cr√©√©e avec 2 fournisseurs')

    // 3. Cr√©er Virement bancaire
    const bankMethod = await prisma.paymentMethod.create({
      data: {
        code: 'bank_transfer',
        name: 'Virement bancaire',
        description: 'Paiement par virement bancaire',
        type: 'MANUAL',
        icon: 'Building',
        isActive: true,
        order: 3,
        apiEnabled: false
      }
    })
    console.log('‚úÖ M√©thode Virement bancaire cr√©√©e')

    // 4. Cr√©er Paiement esp√®ces
    const cashMethod = await prisma.paymentMethod.create({
      data: {
        code: 'cash',
        name: 'Paiement esp√®ce',
        description: 'Paiement en esp√®ces lors de la livraison ou en magasin',
        type: 'MANUAL',
        icon: 'Banknote',
        isActive: true,
        order: 4,
        apiEnabled: false
      }
    })
    console.log('‚úÖ M√©thode Paiement esp√®ce cr√©√©e')

    // V√©rification finale
    const totalMethods = await prisma.paymentMethod.count()
    const totalProviders = await prisma.paymentProvider.count()
    const activeMethods = await prisma.paymentMethod.count({ where: { isActive: true } })
    const activeProviders = await prisma.paymentProvider.count({ where: { isActive: true } })

    console.log('\nüéâ Configuration termin√©e !')
    console.log(`üìä R√©sum√© :`)
    console.log(`   ‚Ä¢ ${totalMethods} m√©thodes cr√©√©es (${activeMethods} actives)`)
    console.log(`   ‚Ä¢ ${totalProviders} fournisseurs cr√©√©s (${activeProviders} actifs)`)

    // Test rapide de l'API
    console.log('\nüß™ Test rapide de l\'API...')
    try {
      const response = await fetch('http://localhost:3001/api/payment-methods?amount=20000&currency=Ar')
      if (response.ok) {
        const data = await response.json()
        console.log(`‚úÖ API fonctionne - ${data.paymentMethods?.length || 0} m√©thodes retourn√©es`)
      } else {
        console.log(`‚ùå API erreur: ${response.status}`)
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  API non accessible (serveur peut-√™tre arr√™t√©): ${error.message}`)
    }

    // V√©rifier PayPal
    const paypalConfig = await prisma.paymentProvider.findFirst({
      where: { code: 'paypal_api' }
    })
    
    if (paypalConfig?.settings) {
      const settings = paypalConfig.settings
      const hasConfig = settings.clientId && settings.clientSecret
      
      console.log(`\nüí≥ Configuration PayPal :`)
      console.log(`   ‚Ä¢ Client ID : ${settings.clientId ? '‚úÖ Configur√©' : '‚ùå Manquant'}`)
      console.log(`   ‚Ä¢ Client Secret : ${settings.clientSecret ? '‚úÖ Configur√©' : '‚ùå Manquant'}`)
      console.log(`   ‚Ä¢ Environnement : ${settings.environment}`)
      
      if (!hasConfig) {
        console.log(`\n‚ö†Ô∏è  Pour activer PayPal, ajoutez dans .env.local :`)
        console.log(`PAYPAL_CLIENT_ID=your_sandbox_client_id`)
        console.log(`PAYPAL_CLIENT_SECRET=your_sandbox_client_secret`)
        console.log(`PAYPAL_ENVIRONMENT=sandbox`)
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le script
if (require.main === module) {
  quickSetupPayments()
}

module.exports = { quickSetupPayments }