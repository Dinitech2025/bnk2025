const { PrismaClient } = require('@prisma/client')

async function testPrismaConnection() {
  console.log('üîç Test de la connexion Prisma...')
  console.log('=' .repeat(50))

  let prisma
  
  try {
    // Cr√©er une nouvelle instance Prisma
    prisma = new PrismaClient()
    console.log('‚úÖ Instance Prisma cr√©√©e')

    // Tester la connexion
    await prisma.$connect()
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie')

    // Tester une requ√™te simple
    const productCount = await prisma.product.count()
    console.log(`‚úÖ Requ√™te test r√©ussie - ${productCount} produits dans la base`)

    // Tester la table ProductCategory
    const categoryCount = await prisma.productCategory.count()
    console.log(`‚úÖ Table ProductCategory accessible - ${categoryCount} cat√©gories`)

    // V√©rifier la cat√©gorie "Produits import√©s"
    const importedCategory = await prisma.productCategory.findFirst({
      where: { name: 'Produits import√©s' }
    })
    
    if (importedCategory) {
      console.log(`‚úÖ Cat√©gorie "Produits import√©s" trouv√©e (ID: ${importedCategory.id})`)
    } else {
      console.log('‚ö†Ô∏è Cat√©gorie "Produits import√©s" non trouv√©e - sera cr√©√©e automatiquement')
    }

    // Tester les tables li√©es
    const attributeCount = await prisma.productAttribute.count()
    console.log(`‚úÖ Table ProductAttribute accessible - ${attributeCount} attributs`)

    // Tester la table Media
    const mediaCount = await prisma.media.count()
    console.log(`‚úÖ Table Media accessible - ${mediaCount} m√©dias`)

    console.log('\nüéâ Tous les tests Prisma sont pass√©s avec succ√®s!')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test Prisma:', error)
    console.error('Type d\'erreur:', error.constructor.name)
    console.error('Message:', error.message)
    
    if (error.code) {
      console.error('Code d\'erreur:', error.code)
    }
    
    // Suggestions de r√©solution
    console.log('\nüîß Suggestions de r√©solution:')
    console.log('1. V√©rifiez que la base de donn√©es est d√©marr√©e')
    console.log('2. V√©rifiez la variable DATABASE_URL dans .env')
    console.log('3. Ex√©cutez: npx prisma generate')
    console.log('4. Ex√©cutez: npx prisma db push')
    
  } finally {
    if (prisma) {
      await prisma.$disconnect()
      console.log('üîå Connexion Prisma ferm√©e')
    }
  }
}

// Test sp√©cifique pour l'API de cr√©ation de produit
async function testProductCreationAPI() {
  console.log('\nüß™ Test de l\'API de cr√©ation de produit...')
  console.log('=' .repeat(50))

  const testData = {
    productInfo: {
      name: 'Test Product',
      url: 'https://example.com',
      specifications: 'Test specifications',
      weight: 1,
      mode: 'air',
      warehouse: '√âtats-Unis'
    },
    costs: {
      supplierPrice: {
        amount: 50,
        currency: 'USD',
        amountInMGA: 255000
      },
      transport: {
        amount: 35,
        currency: 'USD',
        amountInMGA: 178500,
        details: '1 kg √ó 35 USD/kg'
      },
      commission: {
        amount: 19.25,
        currency: 'USD',
        amountInMGA: 98175,
        rate: 38.5,
        details: '38.5% du prix fournisseur'
      },
      fees: {
        processing: {
          amount: 2,
          currency: 'USD',
          amountInMGA: 10200
        },
        tax: {
          amount: 1.75,
          currency: 'USD',
          amountInMGA: 8925,
          rate: 3.5
        }
      },
      total: 550800
    },
    calculationMethod: 'hybrid',
    transitTime: '5-10 jours'
  }

  try {
    const response = await fetch('http://localhost:3000/api/admin/products/create-from-simulation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Note: En production, il faudrait une vraie session
      },
      body: JSON.stringify(testData)
    })

    console.log('Status de la r√©ponse:', response.status)
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ API de cr√©ation r√©ussie')
      console.log('Produit cr√©√©:', result.product?.name)
      console.log('SKU:', result.product?.sku)
    } else {
      console.log('‚ùå Erreur API:', result.error)
    }
    
  } catch (error) {
    console.log('‚ùå Erreur de connexion API:', error.message)
    console.log('üí° Assurez-vous que le serveur Next.js est d√©marr√© (npm run dev)')
  }
}

// Ex√©cuter les tests
async function runAllTests() {
  await testPrismaConnection()
  
  console.log('\n' + '='.repeat(70))
  
  // Note: Le test API n√©cessite une session valide
  console.log('\nüí° Pour tester l\'API compl√®tement:')
  console.log('1. Connectez-vous dans le navigateur')
  console.log('2. Utilisez le simulateur d\'importation')
  console.log('3. Essayez de cr√©er un produit')
}

runAllTests().catch(console.error) 

async function testPrismaConnection() {
  console.log('üîç Test de la connexion Prisma...')
  console.log('=' .repeat(50))

  let prisma
  
  try {
    // Cr√©er une nouvelle instance Prisma
    prisma = new PrismaClient()
    console.log('‚úÖ Instance Prisma cr√©√©e')

    // Tester la connexion
    await prisma.$connect()
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie')

    // Tester une requ√™te simple
    const productCount = await prisma.product.count()
    console.log(`‚úÖ Requ√™te test r√©ussie - ${productCount} produits dans la base`)

    // Tester la table ProductCategory
    const categoryCount = await prisma.productCategory.count()
    console.log(`‚úÖ Table ProductCategory accessible - ${categoryCount} cat√©gories`)

    // V√©rifier la cat√©gorie "Produits import√©s"
    const importedCategory = await prisma.productCategory.findFirst({
      where: { name: 'Produits import√©s' }
    })
    
    if (importedCategory) {
      console.log(`‚úÖ Cat√©gorie "Produits import√©s" trouv√©e (ID: ${importedCategory.id})`)
    } else {
      console.log('‚ö†Ô∏è Cat√©gorie "Produits import√©s" non trouv√©e - sera cr√©√©e automatiquement')
    }

    // Tester les tables li√©es
    const attributeCount = await prisma.productAttribute.count()
    console.log(`‚úÖ Table ProductAttribute accessible - ${attributeCount} attributs`)

    // Tester la table Media
    const mediaCount = await prisma.media.count()
    console.log(`‚úÖ Table Media accessible - ${mediaCount} m√©dias`)

    console.log('\nüéâ Tous les tests Prisma sont pass√©s avec succ√®s!')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test Prisma:', error)
    console.error('Type d\'erreur:', error.constructor.name)
    console.error('Message:', error.message)
    
    if (error.code) {
      console.error('Code d\'erreur:', error.code)
    }
    
    // Suggestions de r√©solution
    console.log('\nüîß Suggestions de r√©solution:')
    console.log('1. V√©rifiez que la base de donn√©es est d√©marr√©e')
    console.log('2. V√©rifiez la variable DATABASE_URL dans .env')
    console.log('3. Ex√©cutez: npx prisma generate')
    console.log('4. Ex√©cutez: npx prisma db push')
    
  } finally {
    if (prisma) {
      await prisma.$disconnect()
      console.log('üîå Connexion Prisma ferm√©e')
    }
  }
}

// Test sp√©cifique pour l'API de cr√©ation de produit
async function testProductCreationAPI() {
  console.log('\nüß™ Test de l\'API de cr√©ation de produit...')
  console.log('=' .repeat(50))

  const testData = {
    productInfo: {
      name: 'Test Product',
      url: 'https://example.com',
      specifications: 'Test specifications',
      weight: 1,
      mode: 'air',
      warehouse: '√âtats-Unis'
    },
    costs: {
      supplierPrice: {
        amount: 50,
        currency: 'USD',
        amountInMGA: 255000
      },
      transport: {
        amount: 35,
        currency: 'USD',
        amountInMGA: 178500,
        details: '1 kg √ó 35 USD/kg'
      },
      commission: {
        amount: 19.25,
        currency: 'USD',
        amountInMGA: 98175,
        rate: 38.5,
        details: '38.5% du prix fournisseur'
      },
      fees: {
        processing: {
          amount: 2,
          currency: 'USD',
          amountInMGA: 10200
        },
        tax: {
          amount: 1.75,
          currency: 'USD',
          amountInMGA: 8925,
          rate: 3.5
        }
      },
      total: 550800
    },
    calculationMethod: 'hybrid',
    transitTime: '5-10 jours'
  }

  try {
    const response = await fetch('http://localhost:3000/api/admin/products/create-from-simulation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Note: En production, il faudrait une vraie session
      },
      body: JSON.stringify(testData)
    })

    console.log('Status de la r√©ponse:', response.status)
    
    const result = await response.json()
    
    if (response.ok) {
      console.log('‚úÖ API de cr√©ation r√©ussie')
      console.log('Produit cr√©√©:', result.product?.name)
      console.log('SKU:', result.product?.sku)
    } else {
      console.log('‚ùå Erreur API:', result.error)
    }
    
  } catch (error) {
    console.log('‚ùå Erreur de connexion API:', error.message)
    console.log('üí° Assurez-vous que le serveur Next.js est d√©marr√© (npm run dev)')
  }
}

// Ex√©cuter les tests
async function runAllTests() {
  await testPrismaConnection()
  
  console.log('\n' + '='.repeat(70))
  
  // Note: Le test API n√©cessite une session valide
  console.log('\nüí° Pour tester l\'API compl√®tement:')
  console.log('1. Connectez-vous dans le navigateur')
  console.log('2. Utilisez le simulateur d\'importation')
  console.log('3. Essayez de cr√©er un produit')
}

runAllTests().catch(console.error) 