generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  firstName           String?
  lastName            String?
  email               String?            @unique
  emailVerified       DateTime?
  password            String?
  image               String?
  phone               String?
  birthDate           DateTime?
  gender              String?
  preferredLanguage   String?            @default("fr")
  newsletter          Boolean            @default(false)
  notes               String?
  customerType        String?            @default("INDIVIDUAL")
  companyName         String?
  vatNumber           String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  role                String             @default("CLIENT")
  communicationMethod String?            @default("EMAIL")
  facebookPage        String?
  telegramUsername    String?
  whatsappNumber      String?
  addresses           Address[]
  orders              Order[]
  sessions            Session[]
  subscriptions       Subscription[]
  userProfiles        UserProfile[]
  activeSubscriptions UserSubscription[]
  processedPayments   Payment[]
  quotes              Quote[]
  quoteMessages       QuoteMessage[]
  carts               Cart[]
  promotionUsages     PromotionUsage[]
  returns             Return[]
  processedReturns    Return[]         @relation("ProcessedReturns")
  orderHistory        OrderHistory[]
  assignedTasks       Task[]           @relation("AssignedTasks")
  createdTasks        Task[]           @relation("CreatedTasks")
  relatedTasks        Task[]           @relation("RelatedUserTasks")
  sentMessages        Message[]        @relation("SentMessages")
  receivedMessages    Message[]        @relation("ReceivedMessages")

  @@index([role])
  @@index([email])
  @@index([phone])
}

model Conversation {
  id          String    @id @default(cuid())
  title       String?   // Titre de la conversation
  participants String[] // IDs des utilisateurs participants
  isActive    Boolean   @default(true)
  lastMessageAt DateTime @default(now())

  // Relations
  messages    Message[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive])
  @@index([lastMessageAt])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id            String  @id @default(cuid())
  userId        String
  type          String
  street        String
  city          String
  state         String?
  zipCode       String
  country       String
  isDefault     Boolean @default(false)
  phoneNumber   String?
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[] @relation("shippingAddress")
  billingOrders Order[] @relation("billingAddress")
}

model ProductCategory {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  parentId    String?
  image       String?
  isVisible   Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  parent      ProductCategory?  @relation("ProductCategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("ProductCategoryHierarchy")
  products    Product[]

  @@map("ProductCategory")
}

model ServiceCategory {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  parentId    String?
  image       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  parent      ServiceCategory?  @relation("ServiceCategoryHierarchy", fields: [parentId], references: [id])
  children    ServiceCategory[] @relation("ServiceCategoryHierarchy")
  services    Service[]

  @@map("ServiceCategory")
}

model Product {
  id               String             @id @default(cuid())
  name             String
  slug             String             @unique
  description      String?
  price            Decimal
  compareAtPrice   Decimal?
  sku              String?            @unique
  barcode          String?            @unique
  inventory        Int                @default(0)
  weight           Decimal?
  dimensions       String?
  categoryId       String?
  featured         Boolean            @default(false)
  published        Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  category         ProductCategory?   @relation(fields: [categoryId], references: [id])
  inventoryHistory InventoryHistory[]
  orderItems       OrderItem[]
  attributes       ProductAttribute[]
  variations       ProductVariation[]
  images           Media[]            @relation("MediaToProduct")
  messages         Message[]

  @@index([categoryId])
}

model ProductAttribute {
  id          String            @id @default(cuid())
  productId   String?
  name        String
  value       String
  variationId String?
  product     Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  variation   ProductVariation? @relation(fields: [variationId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variationId])
}

model ProductVariation {
  id         String             @id @default(cuid())
  sku        String?            @unique
  price      Decimal
  inventory  Int                @default(0)
  productId  String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  attributes ProductAttribute[]
  product    Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  images     Media[]            @relation("MediaToVariation")

  @@index([productId])
}

model Service {
  id                      String             @id @default(cuid())
  name                    String
  slug                    String             @unique
  description             String?
  price                   Decimal
  duration                Int
  categoryId              String?
  published               Boolean            @default(true)
  pricingType             ServicePricingType @default(FIXED)
  minPrice                Decimal?
  maxPrice                Decimal?
  requiresQuote           Boolean            @default(false)
  autoAcceptNegotiation   Boolean            @default(false)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  category                ServiceCategory?   @relation(fields: [categoryId], references: [id])
  orderItems              OrderItem[]
  images                  Media[]            @relation("MediaToService")
  newQuotes               Quote[]            @relation("QuoteToService")
  messages                Message[]

  @@index([categoryId])
  @@index([pricingType])
}

model Platform {
  id                    String                  @id @default(cuid())
  name                  String
  slug                  String                  @unique
  description           String?
  logo                  String?
  websiteUrl            String?
  type                  String                  @default("VIDEO")
  hasProfiles           Boolean                 @default(true)
  maxProfilesPerAccount Int?                    @default(5)
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  tags                  String?
  popularity            Float?                  @default(0)
  features              String?
  pricingModel          String?                 @default("SUBSCRIPTION")
  logoMediaId           String?
  hasMultipleOffers     Boolean                 @default(false)
  hasGiftCards          Boolean                 @default(false)
  accounts              Account[]
  giftCards             GiftCard[]
  logoMedia             Media?                  @relation("MediaToPlatform", fields: [logoMediaId], references: [id])
  platformOffers        PlatformOffer[]
  providerOffers        PlatformProviderOffer[]

  @@index([isActive])
  @@index([type])
  @@index([popularity])
  @@index([pricingModel])
}

model Account {
  id                   String                 @id @default(cuid())
  platformId           String
  username             String
  email                String?
  password             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  providerOfferId      String?
  expiresAt            DateTime?
  status               String                 @default("INACTIVE")
  availability         Boolean                @default(false)
  platform             Platform               @relation(fields: [platformId], references: [id])
  providerOffer        PlatformProviderOffer? @relation(fields: [providerOfferId], references: [id])
  accountProfiles      AccountProfile[]
  usedGiftCards        GiftCard[]             @relation("UsedGiftCards")
  profiles             Profile[]
  subscriptionAccounts SubscriptionAccount[]
  tasks                Task[]

  @@index([platformId])
  @@index([providerOfferId])
}

model AccountProfile {
  id             String        @id @default(cuid())
  accountId      String
  name           String?
  profileSlot    Int
  pin            String?
  isAssigned     Boolean       @default(false)
  subscriptionId String?
  account        Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  subscription   Subscription? @relation("ProfileAssignment", fields: [subscriptionId], references: [id])

  @@unique([accountId, profileSlot])
}

model Subscription {
  id                   String                @id @default(cuid())
  userId               String
  offerId              String
  platformOfferId      String?
  startDate            DateTime
  endDate              DateTime
  status               String                @default("PENDING")
  autoRenew            Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  contactNeeded        Boolean               @default(false)
  orderId              String?
  accountProfiles      AccountProfile[]      @relation("ProfileAssignment")
  Profile              Profile[]
  offer                Offer                 @relation(fields: [offerId], references: [id])
  order                Order?                @relation(fields: [orderId], references: [id])
  platformOffer        PlatformOffer?        @relation(fields: [platformOfferId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  subscriptionAccounts SubscriptionAccount[]
  UserSubscription     UserSubscription[]
  tasks                Task[]
  messages             Message[]

  @@index([userId])
  @@index([offerId])
  @@index([status])
  @@index([orderId])
}

model SubscriptionAccount {
  id             String       @id @default(cuid())
  subscriptionId String
  accountId      String
  status         String       @default("ACTIVE")
  assignedAt     DateTime     @default(now())
  notes          String?
  account        Account      @relation(fields: [accountId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, accountId])
  @@index([status])
}

model UserSubscription {
  id             String        @id @default(cuid())
  userId         String
  subscriptionId String
  isOwner        Boolean       @default(false)
  userProfiles   UserProfile[]
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id                 String           @id @default(cuid())
  userSubscriptionId String
  userId             String
  name               String
  avatar             String?
  avatarMediaId      String?
  pin                String?
  preferences        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  avatarMedia        Media?           @relation("MediaToUserProfile", fields: [avatarMediaId], references: [id])
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userSubscription   UserSubscription @relation(fields: [userSubscriptionId], references: [id], onDelete: Cascade)
}

model Order {
  id                String         @id @default(cuid())
  userId            String
  status            String         @default("QUOTE")
  total             Decimal
  currency          String         @default("Ar")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  addressId         String?        // Adresse de livraison
  billingAddressId  String?        // Adresse de facturation
  orderNumber       String?        @unique
  
  // Informations client (pour commandes invités)
  email             String?
  phone             String?
  firstName         String?
  lastName          String?
  
  // Informations de paiement
  paymentMethod     String?
  paymentStatus     String         @default("PENDING")
  transactionId     String?
  paymentDetails    Json?
  
  // Informations de livraison
  deliveryMode      String?        // Type de livraison (home_delivery, express_delivery, pickup_store, pickup_point)
  deliveryName      String?        // Nom du mode de livraison
  deliveryCost      Decimal?       // Coût de la livraison
  deliveryTime      String?        // Temps de livraison estimé
  deliveryDetails   Json?          // Détails additionnels de livraison
  
  // Réduction globale
  globalDiscountType   String?     // PERCENTAGE ou FIXED
  globalDiscountValue  Decimal?    // Valeur de la réduction (% ou montant fixe)
  globalDiscountAmount Decimal?    // Montant calculé de la réduction
  
  // Notes et métadonnées
  notes             String?
  
  // Taux de change au moment de la commande
  exchangeRates     Json?           // Taux de change complets au moment de la commande
  baseCurrency      String?         // Devise de base (MGA)
  displayCurrency   String?         // Devise d'affichage choisie par le client
  exchangeRate      Decimal?        // Taux de change spécifique utilisé
  originalTotal     Decimal?        // Montant original dans la devise de base
  
  // Informations de livraison
  deliveryMethodId  String?         // Méthode de livraison choisie
  shippingCost      Decimal?        // Coût de livraison calculé
  estimatedDelivery Json?           // Délai de livraison estimé {min: number, max: number}
  trackingNumber    String?         // Numéro de suivi
  
  shippingAddress   Address?       @relation("shippingAddress", fields: [addressId], references: [id])
  billingAddress    Address?       @relation("billingAddress", fields: [billingAddressId], references: [id])
  deliveryMethod    DeliveryMethod? @relation(fields: [deliveryMethodId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  items             OrderItem[]
  subscriptions     Subscription[]
  payments          Payment[]
  promotion         Promotion?     @relation(fields: [promotionId], references: [id])
  promotionId       String?
  promotionUsages   PromotionUsage[]
  returns           Return[]
  history           OrderHistory[]
  messages          Message[]

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([paymentStatus])
  @@index([promotionId])
}

model OrderHistory {
  id          String   @id @default(cuid())
  orderId     String
  status      String   // Nouveau statut
  previousStatus String? // Ancien statut
  action      String   // Type d'action: STATUS_CHANGE, CREATED, CANCELLED, etc.
  description String?  // Description de l'action
  userId      String?  // Utilisateur qui a effectué l'action
  createdAt   DateTime @default(now())
  
  order       Order    @relation(fields: [orderId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  
  @@index([orderId])
  @@index([createdAt])
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  quantity      Int      @default(1)
  unitPrice     Decimal
  totalPrice    Decimal
  itemType      String
  productId     String?
  serviceId     String?
  offerId       String?
  metadata      Json?
  
  // Réduction par article
  discountType   String?  // PERCENTAGE ou FIXED
  discountValue  Decimal? // Valeur de la réduction (% ou montant fixe)
  discountAmount Decimal? // Montant calculé de la réduction
  
  offer      Offer?   @relation(fields: [offerId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])
  service    Service? @relation(fields: [serviceId], references: [id])
  returnItems ReturnItem[]
}

model PaymentMethod {
  id                    String            @id @default(cuid())
  code                  String            @unique // paypal, mobile_money, bank_transfer, cash, credit_card
  name                  String            // Nom d'affichage
  description           String?           // Description de la méthode
  icon                  String?           // Nom de l'icône
  isActive              Boolean           @default(true)
  isBuiltin             Boolean           @default(false) // Mode de paiement intégré (insupprimable)
  order                 Int               @default(0) // Ordre d'affichage
  currency              String?           // Devise principale
  
  // Type de méthode
  type                  String            @default("DIRECT") // DIRECT (API), PROVIDERS (fournisseurs), MANUAL (manuel)
  
  // Paramètres de configuration
  minAmount             Decimal?          // Montant minimum
  maxAmount             Decimal?          // Montant maximum
  feeType               String?           // PERCENTAGE, FIXED, NONE
  feeValue              Decimal?          // Valeur de la commission
  processingTime        String?           // Temps de traitement (ex: "24h", "Instantané")
  
  // Configuration d'interface
  requiresReference     Boolean           @default(false) // Nécessite une référence
  requiresTransactionId Boolean           @default(false) // Nécessite un ID de transaction
  allowPartialPayments  Boolean           @default(true)  // Permet les paiements partiels
  
  // Configuration API pour méthodes directes
  apiEnabled            Boolean           @default(false) // Si la méthode utilise une API
  apiEndpoint           String?           // Endpoint API principal
  publicKey             String?           // Clé publique API
  
  // Métadonnées JSON pour paramètres avancés
  settings              Json?             // Configuration spécifique (ex: endpoints API, clés)
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Relations
  providers             PaymentProvider[]
  payments              Payment[]
  
  @@index([isActive])
  @@index([code])
  @@index([type])
  @@index([order])
}

model PaymentProvider {
  id                String          @id @default(cuid())
  paymentMethodId   String
  code              String          // orange_money, mvola, paypal, bni, etc.
  name              String          // Nom d'affichage
  description       String?
  logo              String?         // URL du logo
  isActive          Boolean         @default(true)
  order             Int             @default(0)
  
  // Paramètres spécifiques au fournisseur
  apiEndpoint       String?         // Endpoint API si applicable
  publicKey         String?         // Clé publique
  merchantId        String?         // ID marchand
  
  // Configuration des frais spécifique au fournisseur
  feeType           String?         // PERCENTAGE, FIXED, NONE
  feeValue          Decimal?        // Valeur de la commission
  
  // Limites spécifiques
  minAmount         Decimal?
  maxAmount         Decimal?
  dailyLimit        Decimal?        // Limite quotidienne
  
  // Métadonnées JSON pour configuration avancée
  settings          Json?
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  paymentMethod     PaymentMethod   @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  payments          Payment[]
  
  @@unique([paymentMethodId, code])
  @@index([paymentMethodId])
  @@index([isActive])
  @@index([code])
}

model Payment {
  id              String           @id @default(cuid())
  orderId         String
  amount          Decimal
  currency        String           @default("Ar")
  methodId        String?          // Référence vers PaymentMethod
  providerId      String?          // Référence vers PaymentProvider
  method          String?          // Conservé pour compatibilité (paypal, mobile_money, bank_transfer, cash)
  provider        String?          // Conservé pour compatibilité (orange_money, mvola, etc.)
  transactionId   String?          // ID de transaction externe
  reference       String?          // Référence du paiement
  status          String           @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  notes           String?          // Notes sur le paiement
  processedBy     String?          // ID de l'utilisateur qui a traité le paiement
  
  // Informations sur les frais
  feeAmount       Decimal?         // Montant des frais appliqués
  feeType         String?          // Type de frais appliqué
  netAmount       Decimal?         // Montant net après frais
  
  // Taux de change au moment du paiement
  paymentExchangeRate    Decimal?  // Taux de change au moment du paiement
  paymentBaseCurrency    String?   // Devise de base au moment du paiement
  paymentDisplayCurrency String?   // Devise d'affichage au moment du paiement
  originalAmount         Decimal?  // Montant original dans la devise de base
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  order           Order            @relation(fields: [orderId], references: [id])
  processedByUser User?            @relation(fields: [processedBy], references: [id])
  paymentMethod   PaymentMethod?   @relation(fields: [methodId], references: [id])
  paymentProvider PaymentProvider? @relation(fields: [providerId], references: [id])
  
  @@index([orderId])
  @@index([status])
  @@index([method])
  @@index([methodId])
  @@index([providerId])
  @@index([createdAt])
}

model Media {
  id           String             @id @default(cuid())
  name         String
  fileName     String
  mimeType     String
  path         String
  size         Int
  alt          String?
  type         String             @default("image") // "image" ou "video"
  thumbnail    String?            // URL du thumbnail pour les vidéos
  duration     Int?               // Durée en secondes pour les vidéos
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  platforms    Platform[]         @relation("MediaToPlatform")
  userProfiles UserProfile[]      @relation("MediaToUserProfile")
  offers       Offer[]            @relation("MediaToOffer")
  products     Product[]          @relation("MediaToProduct")
  services     Service[]          @relation("MediaToService")
  variations   ProductVariation[] @relation("MediaToVariation")

  @@index([type])
}

model Setting {
  id    String  @id @default(cuid())
  key   String  @unique
  value String?
  type  String
}

model HeroSlide {
  id          String  @id @default(cuid())
  title       String
  description String?
  image       String
  buttonText  String  @default("Découvrir")
  buttonLink  String
  isActive    Boolean @default(true)
  order       Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, order])
}

model Profile {
  id             String       @id @default(cuid())
  subscriptionId String
  accountId      String
  profileSlot    Int
  name           String?
  account        Account      @relation(fields: [accountId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, profileSlot])
  @@index([accountId])
}

model Offer {
  id             String          @id @default(cuid())
  name           String
  description    String?
  type           String          @default("SINGLE")
  price          Decimal
  duration       Int
  features       String?
  isPopular      Boolean         @default(false)
  isActive       Boolean         @default(true)
  maxProfiles    Int             @default(1)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  durationUnit   String          @default("MONTH")
  maxUsers       Int             @default(1)
  profileCount   Int             @default(1)
  orderItems     OrderItem[]
  platformOffers PlatformOffer[]
  subscriptions  Subscription[]
  images         Media[]         @relation("MediaToOffer")

  @@index([isActive])
}

model PlatformOffer {
  id            String         @id @default(cuid())
  platformId    String
  offerId       String
  isDefault     Boolean        @default(false)
  profileCount  Int            @default(1)
  offer         Offer          @relation(fields: [offerId], references: [id], onDelete: Cascade)
  platform      Platform       @relation(fields: [platformId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
}

model InventoryHistory {
  id               String   @id @default(cuid())
  productId        String
  type             String
  quantity         Int
  previousQuantity Int
  newQuantity      Int
  reason           String
  createdAt        DateTime @default(now())
  product          Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Ticket {
  id                String               @id @default(cuid())
  duration          String               @unique
  price             Int
  stock             Int                  @default(0)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  codes             TicketCode[]
  stockUpdates      StockUpdate[]
  usages            TicketUsage[]
  dailyHistories    DailyTicketHistory[]
}

model TicketCode {
  id        String    @id @default(cuid())
  code      String    @unique
  ticketId  String
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ticket    Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([isUsed])
  @@index([code])
}

model DailyTicketHistory {
  id        String   @id @default(cuid())
  ticketId  String
  date      DateTime @default(now())
  type      String   // "USED" ou "BROKEN"
  quantity  Int
  reason    String?  // Raison pour les tickets défaillants
  code      String?  // Code du ticket utilisé
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@index([date])
  @@index([type])
}

model StockUpdate {
  id            String   @id @default(cuid())
  ticketId      String
  amount        Int
  previousStock Int
  newStock      Int
  createdAt     DateTime @default(now())
  ticket        Ticket   @relation(fields: [ticketId], references: [id])
}

model TicketUsage {
  id       String      @id @default(cuid())
  ticketId String
  quantity Int
  date     DateTime    @default(now())
  reportId String
  report   DailyReport @relation(fields: [reportId], references: [id])
  ticket   Ticket      @relation(fields: [ticketId], references: [id])
}

model DailyReport {
  id           String        @id @default(cuid())
  date         DateTime      @default(now())
  totalRevenue Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ticketUsages TicketUsage[]
}

model GiftCard {
  id         String    @id @default(cuid())
  code       String    @unique
  amount     Float
  currency   String    @default("TRY")
  status     String    @default("ACTIVE")
  platformId String
  usedById   String?
  usedAt     DateTime?
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  platform   Platform  @relation(fields: [platformId], references: [id])
  usedBy     Account?  @relation("UsedGiftCards", fields: [usedById], references: [id])

  @@index([platformId])
  @@index([status])
  @@index([code])
}

model PlatformProviderOffer {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  platformId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  currency    String    @default("TRY")
  deviceCount Int       @default(1)
  price       Float
  accounts    Account[]
  platform    Platform  @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@unique([platformId, name])
  @@index([platformId])
  @@index([isActive])
}

model ImportCalculationSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("import_calculation_settings")
}

model Quote {
  id            String         @id @default(cuid())
  userId        String
  serviceId     String
  description   String
  budget        Decimal?
  status        QuoteStatus    @default(PENDING)
  proposedPrice Decimal?
  finalPrice    Decimal?
  attachments   String[]       @default([])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  service       Service        @relation("QuoteToService", fields: [serviceId], references: [id], onDelete: Cascade)
  messages      QuoteMessage[]
  adminMessages Message[]

  @@index([userId])
  @@index([serviceId])
  @@index([status])
}

model QuoteMessage {
  id            String   @id @default(cuid())
  quoteId       String
  senderId      String
  message       String
  proposedPrice Decimal?
  attachments   String[] @default([])
  createdAt     DateTime @default(now())
  quote         Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  sender        User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([quoteId])
  @@index([senderId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  sessionId String?
  expiresAt DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([userId])
  @@index([sessionId])
  @@index([expiresAt])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  type      String   // 'product', 'service', 'offer'
  itemId    String
  name      String
  price     Decimal
  quantity  Int      @default(1)
  image     String?
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([type])
  @@index([itemId])
}

enum ServicePricingType {
  FIXED
  RANGE
  NEGOTIABLE
  QUOTE_REQUIRED
}

enum QuoteStatus {
  PENDING
  PRICE_PROPOSED
  NEGOTIATING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Availability {
  AVAILABLE
  UNAVAILABLE
  MAINTENANCE
}

model HeroBanner {
  id              String  @id @default(cuid())
  isActive        Boolean @default(true)
  title           String  @default("Bienvenue chez")
  subtitle        String  @default("Boutik'nakà")
  description     String  @default("Découvrez nos produits et services de qualité exceptionnelle")
  backgroundImage String  @default("https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&q=80")
  
  // Configuration du diaporama d'images de fond
  backgroundSlideshowEnabled Boolean @default(false) // Activer/désactiver le diaporama
  backgroundSlideshowDuration Int @default(5000) // Durée entre les changements (ms)
  backgroundSlideshowTransition String @default("fade") // Type de transition: "fade", "slide", "zoom"
  
  // Personnalisation des couleurs de texte
  titleColor      String @default("#ffffff")
  subtitleColor   String @default("#fde047")
  descriptionColor String @default("#ffffff")
  
  // Personnalisation des boutons
  primaryButtonText   String @default("Explorer nos Produits")
  primaryButtonLink   String @default("/products")
  primaryButtonColor  String @default("#ffffff")
  primaryButtonBg     String @default("#3b82f6")
  
  secondaryButtonText String @default("Découvrir nos Services") 
  secondaryButtonLink String @default("/services")
  secondaryButtonColor String @default("#ffffff")
  secondaryButtonBg   String @default("transparent")
  secondaryButtonBorder String @default("#ffffff")
  
  // Effets sur l'image de fond
  backgroundBlur      Int @default(0) // 0-10 niveau de flou
  backgroundOpacity   Int @default(40) // 0-100 opacité de l'overlay
  backgroundOverlayColor String @default("#000000") // Couleur de l'overlay (noir par défaut)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relation avec les images de fond du diaporama
  backgroundImages HeroBannerImage[]

  @@index([isActive])
}

model HeroBannerImage {
  id              String @id @default(cuid())
  heroBannerId    String
  imageUrl        String
  title           String? // Titre optionnel pour l'image
  description     String? // Description optionnelle
  order           Int @default(0) // Ordre d'affichage
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relation avec la bannière
  heroBanner      HeroBanner @relation(fields: [heroBannerId], references: [id], onDelete: Cascade)
  
  @@index([heroBannerId])
  @@index([isActive])
  @@index([order])
}

model DeliveryMethod {
  id            String         @id @default(cuid())
  name          String
  description   String?
  type          String         // 'api' or 'manual'
  isActive      Boolean        @default(true)
  apiConfig     Json?          // API configuration for external providers
  estimatedDays Json           // {min: number, max: number}
  icon          String?        @default("truck")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  pricingRules  PricingRule[]
  orders        Order[]

  @@index([isActive])
  @@index([type])
}

model DeliveryZone {
  id           String         @id @default(cuid())
  name         String
  description  String?
  type         String         // 'country', 'region', 'city', 'postal'
  areas        Json           // Array of strings (countries, cities, postal codes, etc.)
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  pricingRules PricingRule[]

  @@index([isActive])
  @@index([type])
}

model PricingRule {
  id                    String         @id @default(cuid())
  deliveryMethodId      String
  deliveryZoneId        String
  weightRanges          Json?          // Array of weight ranges with pricing
  volumeRanges          Json?          // Array of volume ranges with pricing
  fixedPrice            Decimal?       // Fixed price option
  freeShippingThreshold Decimal?       // Minimum order value for free shipping
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  deliveryMethod        DeliveryMethod @relation(fields: [deliveryMethodId], references: [id], onDelete: Cascade)
  deliveryZone          DeliveryZone   @relation(fields: [deliveryZoneId], references: [id], onDelete: Cascade)

  @@unique([deliveryMethodId, deliveryZoneId])
  @@index([isActive])
}

model Promotion {
  id                String           @id @default(cuid())
  name              String
  description       String?
  type              String           // 'PERCENTAGE', 'FIXED_AMOUNT', 'FREE_SHIPPING', 'BUY_X_GET_Y'
  code              String?          @unique // Code promo optionnel
  value             Decimal          // Valeur de la promotion (pourcentage ou montant)
  minOrderAmount    Decimal?         // Montant minimum de commande
  maxDiscountAmount Decimal?         // Montant maximum de réduction
  usageLimit        Int?             // Limite d'utilisation globale
  usageCount        Int              @default(0) // Nombre d'utilisations
  userUsageLimit    Int?             // Limite par utilisateur
  isActive          Boolean          @default(true)
  isPublic          Boolean          @default(true) // Visible publiquement ou code requis
  startDate         DateTime
  endDate           DateTime
  applicableProducts Json?           // IDs des produits concernés
  applicableCategories Json?         // IDs des catégories concernées
  excludedProducts  Json?            // IDs des produits exclus
  excludedCategories Json?           // IDs des catégories exclues
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  orders            Order[]
  promotionUsages   PromotionUsage[]

  @@index([code])
  @@index([isActive])
  @@index([startDate, endDate])
}

model PromotionUsage {
  id          String    @id @default(cuid())
  promotionId String
  userId      String
  orderId     String
  discountAmount Decimal
  createdAt   DateTime  @default(now())
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([promotionId, userId, orderId])
  @@index([promotionId])
  @@index([userId])
}

model Return {
  id              String        @id @default(cuid())
  returnNumber    String        @unique
  orderId         String
  userId          String
  status          String        @default("REQUESTED") // REQUESTED, APPROVED, REJECTED, IN_TRANSIT, RECEIVED, PROCESSED, REFUNDED
  reason          String        // DEFECTIVE, WRONG_ITEM, NOT_AS_DESCRIBED, CHANGED_MIND, etc.
  description     String?
  requestedAmount Decimal       // Montant demandé pour le remboursement
  approvedAmount  Decimal?      // Montant approuvé par l'admin
  refundedAmount  Decimal?      // Montant effectivement remboursé
  refundMethod    String?       // ORIGINAL_PAYMENT, STORE_CREDIT, BANK_TRANSFER
  adminNotes      String?       // Notes internes de l'administrateur
  customerNotes   String?       // Notes du client
  images          Json?         // URLs des images jointes
  trackingNumber  String?       // Numéro de suivi du retour
  processedBy     String?       // ID de l'admin qui a traité le retour
  processedAt     DateTime?     // Date de traitement
  refundedAt      DateTime?     // Date du remboursement
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  order           Order         @relation(fields: [orderId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  processor       User?         @relation("ProcessedReturns", fields: [processedBy], references: [id])
  returnItems     ReturnItem[]

  @@index([status])
  @@index([orderId])
  @@index([userId])
  @@index([returnNumber])
}

model ReturnItem {
  id          String   @id @default(cuid())
  returnId    String
  orderItemId String
  quantity    Int      // Quantité à retourner
  reason      String?  // Raison spécifique pour cet article
  condition   String?  // État de l'article (NEW, USED, DAMAGED, etc.)
  refundAmount Decimal // Montant de remboursement pour cet article
  createdAt   DateTime @default(now())
  
  return      Return    @relation(fields: [returnId], references: [id], onDelete: Cascade)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  @@index([returnId])
  @@index([orderItemId])
}

model Task {
  id              String    @id @default(cuid())
  title           String    // Titre de la tâche
  description     String?   // Description détaillée
  type            String    // Type: SUBSCRIPTION_EXPIRY, ACCOUNT_RECHARGE, PAYMENT_REMINDER, PROSPECTION, CUSTOM
  priority        String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  status          String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  dueDate         DateTime? // Date d'échéance
  completedAt     DateTime? // Date de complétion

  // Relations
  assignedToId    String?   // ID de l'utilisateur assigné (admin/staff)
  createdById     String?   // ID de l'utilisateur qui a créé la tâche
  relatedUserId   String?   // ID du client concerné (pour les tâches liées à un client)
  relatedSubscriptionId String? // ID de l'abonnement concerné
  relatedAccountId String?  // ID du compte streaming concerné

  // Récurrence
  isRecurring     Boolean   @default(false)
  recurrenceType  String?   // DAILY, WEEKLY, MONTHLY
  recurrenceValue Int?      // Nombre de fois (ex: 2 pour "2 fois par jour")
  lastGenerated   DateTime? // Dernière fois que la tâche récurrente a été générée

  // Métadonnées
  metadata        Json?     // Données supplémentaires flexibles
  notes           String?   // Notes internes

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  assignedTo      User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdBy       User?     @relation("CreatedTasks", fields: [createdById], references: [id])
  relatedUser     User?     @relation("RelatedUserTasks", fields: [relatedUserId], references: [id])
  relatedSubscription Subscription? @relation(fields: [relatedSubscriptionId], references: [id])
  relatedAccount  Account?  @relation(fields: [relatedAccountId], references: [id])

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([dueDate])
  @@index([assignedToId])
  @@index([relatedUserId])
  @@index([isRecurring])
}

model Message {
  id              String    @id @default(cuid())
  subject         String    // Sujet du message
  content         String    // Contenu du message
  type            String    @default("GENERAL") // GENERAL, SUPPORT, ORDER, SUBSCRIPTION, PAYMENT, CUSTOM
  priority        String    @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  status          String    @default("UNREAD") // UNREAD, READ, REPLIED, ARCHIVED, DELETED

  // Relations - Support bidirectionnel
  fromUserId      String    // Expéditeur (Admin/Staff/Client)
  toUserId        String    // Destinataire (Admin/Staff/Client)

  // Réponse (si c'est une réponse à un message)
  parentMessageId String?   // ID du message parent (pour les réponses)
  replyTo         Message?  @relation("MessageReplies", fields: [parentMessageId], references: [id])

  // Conversation (groupe de messages liés)
  conversationId  String?   // ID de la conversation (généré automatiquement)

  // Relations avec Conversation
  conversation    Conversation? @relation(fields: [conversationId], references: [id])

  // Métadonnées
  relatedOrderId   String?   // Commande liée
  relatedSubscriptionId String? // Abonnement lié
  relatedQuoteId   String?   // Devis lié
  relatedProductId String?   // Produit lié
  relatedServiceId String?   // Service lié
  metadata        Json?     // Données supplémentaires

  // Timestamps
  sentAt          DateTime  @default(now())
  readAt          DateTime? // Quand le destinataire a lu le message
  repliedAt       DateTime? // Quand quelqu'un a répondu

  // Interface publique
  isPublic        Boolean   @default(false) // Visible côté client sans authentification
  clientEmail     String?   // Email du client pour messages anonymes
  clientName      String?   // Nom du client pour messages anonymes

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations Prisma
  fromUser        User      @relation("SentMessages", fields: [fromUserId], references: [id])
  toUser          User      @relation("ReceivedMessages", fields: [toUserId], references: [id])
  relatedOrder    Order?    @relation(fields: [relatedOrderId], references: [id])
  relatedSubscription Subscription? @relation(fields: [relatedSubscriptionId], references: [id])
  relatedQuote    Quote?    @relation(fields: [relatedQuoteId], references: [id])
  relatedProduct  Product?  @relation(fields: [relatedProductId], references: [id])
  relatedService  Service?  @relation(fields: [relatedServiceId], references: [id])
  replies         Message[] @relation("MessageReplies")

  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([conversationId])
  @@index([isPublic])
  @@index([relatedOrderId])
  @@index([relatedSubscriptionId])
  @@index([relatedProductId])
  @@index([relatedServiceId])
}