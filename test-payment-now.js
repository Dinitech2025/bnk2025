// Test rapide des m√©thodes de paiement
const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testNow() {
  console.log('üîç Test rapide...\n')
  
  try {
    // 1. Compter les m√©thodes dans la BDD
    const methodsCount = await prisma.paymentMethod.count()
    console.log(`üìä M√©thodes dans la BDD: ${methodsCount}`)
    
    if (methodsCount === 0) {
      console.log('‚ùå Aucune m√©thode trouv√©e - Ex√©cution du setup...')
      
      // Cr√©er rapidement les m√©thodes de base
      await prisma.paymentMethod.createMany({
        data: [
          {
            code: 'paypal',
            name: 'Paiement en ligne',
            description: 'PayPal, cartes bancaires, Google Pay',
            type: 'PROVIDERS',
            icon: 'CreditCard',
            isActive: true,
            order: 1,
            apiEnabled: true
          },
          {
            code: 'cash',
            name: 'Paiement esp√®ce',
            description: 'Paiement √† la livraison',
            type: 'MANUAL',
            icon: 'Banknote',
            isActive: true,
            order: 2,
            apiEnabled: false
          }
        ]
      })
      
      // Cr√©er les fournisseurs PayPal
      const paypalMethod = await prisma.paymentMethod.findUnique({
        where: { code: 'paypal' }
      })
      
      if (paypalMethod) {
        await prisma.paymentProvider.create({
          data: {
            code: 'paypal_api',
            name: 'PayPal',
            description: 'Paiement PayPal s√©curis√©',
            paymentMethodId: paypalMethod.id,
            isActive: true,
            order: 1,
            settings: {
              environment: 'sandbox',
              clientId: process.env.PAYPAL_CLIENT_ID || '',
              clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',
              currency: 'EUR'
            }
          }
        })
      }
      
      console.log('‚úÖ M√©thodes cr√©√©es')
    }
    
    // 2. Tester l'API
    console.log('\nüåê Test API...')
    try {
      const response = await fetch('http://localhost:3001/api/payment-methods?amount=20000&currency=Ar')
      const data = await response.json()
      
      if (response.ok) {
        console.log(`‚úÖ API OK - ${data.paymentMethods?.length || 0} m√©thodes`)
        data.paymentMethods?.forEach(method => {
          console.log(`   ‚Ä¢ ${method.name} - ${method.providers?.length || 0} fournisseurs`)
        })
      } else {
        console.log(`‚ùå API erreur: ${data.error}`)
      }
    } catch (error) {
      console.log(`‚ùå Erreur r√©seau: ${error.message}`)
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testNow()